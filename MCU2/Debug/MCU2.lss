
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000025ce  00002662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  0000267c  2**0
                  ALLOC
  3 .stab         00002094  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000131c  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007925  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000095c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000099ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a17b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 12 	call	0x2482	; 0x2482 <main>
      8a:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
volatile uint8_t R_Data;
volatile uint8_t T_Data;


static uint8_t UART_Arr[3];
extern uint8_t UART_init(str_UartConfg_t *uart_config) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	27 97       	sbiw	r28, 0x07	; 7
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	89 83       	std	Y+1, r24	; 0x01

	UART_Arr[0] = uart_config->u32_BaudRate;
     b62:	e9 81       	ldd	r30, Y+1	; 0x01
     b64:	fa 81       	ldd	r31, Y+2	; 0x02
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	a2 81       	ldd	r26, Z+2	; 0x02
     b6c:	b3 81       	ldd	r27, Z+3	; 0x03
     b6e:	80 93 7a 00 	sts	0x007A, r24
	UART_Arr[1] = uart_config->u8_DataBits;
     b72:	e9 81       	ldd	r30, Y+1	; 0x01
     b74:	fa 81       	ldd	r31, Y+2	; 0x02
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	80 93 7b 00 	sts	0x007B, r24
	UART_Arr[2] = uart_config->u8_FlagAction;
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	85 81       	ldd	r24, Z+5	; 0x05
     b82:	80 93 7c 00 	sts	0x007C, r24

	switch (uart_config->u8_DataBits) {
     b86:	e9 81       	ldd	r30, Y+1	; 0x01
     b88:	fa 81       	ldd	r31, Y+2	; 0x02
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	3f 83       	std	Y+7, r19	; 0x07
     b92:	2e 83       	std	Y+6, r18	; 0x06
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	9f 81       	ldd	r25, Y+7	; 0x07
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <UART_init+0x5a>
     b9e:	57 c0       	rjmp	.+174    	; 0xc4e <UART_init+0x108>
     ba0:	ee 81       	ldd	r30, Y+6	; 0x06
     ba2:	ff 81       	ldd	r31, Y+7	; 0x07
     ba4:	e3 30       	cpi	r30, 0x03	; 3
     ba6:	f1 05       	cpc	r31, r1
     ba8:	5c f4       	brge	.+22     	; 0xbc0 <UART_init+0x7a>
     baa:	2e 81       	ldd	r18, Y+6	; 0x06
     bac:	3f 81       	ldd	r19, Y+7	; 0x07
     bae:	21 15       	cp	r18, r1
     bb0:	31 05       	cpc	r19, r1
     bb2:	99 f0       	breq	.+38     	; 0xbda <UART_init+0x94>
     bb4:	8e 81       	ldd	r24, Y+6	; 0x06
     bb6:	9f 81       	ldd	r25, Y+7	; 0x07
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	59 f1       	breq	.+86     	; 0xc14 <UART_init+0xce>
     bbe:	9e c0       	rjmp	.+316    	; 0xcfc <UART_init+0x1b6>
     bc0:	ee 81       	ldd	r30, Y+6	; 0x06
     bc2:	ff 81       	ldd	r31, Y+7	; 0x07
     bc4:	e3 30       	cpi	r30, 0x03	; 3
     bc6:	f1 05       	cpc	r31, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <UART_init+0x86>
     bca:	5e c0       	rjmp	.+188    	; 0xc88 <UART_init+0x142>
     bcc:	2e 81       	ldd	r18, Y+6	; 0x06
     bce:	3f 81       	ldd	r19, Y+7	; 0x07
     bd0:	27 30       	cpi	r18, 0x07	; 7
     bd2:	31 05       	cpc	r19, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <UART_init+0x92>
     bd6:	75 c0       	rjmp	.+234    	; 0xcc2 <UART_init+0x17c>
     bd8:	91 c0       	rjmp	.+290    	; 0xcfc <UART_init+0x1b6>
	case UART_5_BIT_MODE:
		SET_BIT(UCSRC, URSEL);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
		CLR_BIT(UCSRC, UCSZ0);
     be8:	a0 e4       	ldi	r26, 0x40	; 64
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e0 e4       	ldi	r30, 0x40	; 64
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	8c 93       	st	X, r24
		CLR_BIT(UCSRC, UCSZ1);
     bf6:	a0 e4       	ldi	r26, 0x40	; 64
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e0 e4       	ldi	r30, 0x40	; 64
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8b 7f       	andi	r24, 0xFB	; 251
     c02:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, UCSZ2);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	8c 93       	st	X, r24
     c12:	77 c0       	rjmp	.+238    	; 0xd02 <UART_init+0x1bc>
		break;
	case UART_6_BIT_MODE:
		SET_BIT(UCSRC, URSEL);
     c14:	a0 e4       	ldi	r26, 0x40	; 64
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ0);
     c22:	a0 e4       	ldi	r26, 0x40	; 64
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e0 e4       	ldi	r30, 0x40	; 64
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	8c 93       	st	X, r24
		CLR_BIT(UCSRC, UCSZ1);
     c30:	a0 e4       	ldi	r26, 0x40	; 64
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e0 e4       	ldi	r30, 0x40	; 64
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8b 7f       	andi	r24, 0xFB	; 251
     c3c:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, UCSZ2);
     c3e:	aa e2       	ldi	r26, 0x2A	; 42
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	ea e2       	ldi	r30, 0x2A	; 42
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	8b 7f       	andi	r24, 0xFB	; 251
     c4a:	8c 93       	st	X, r24
     c4c:	5a c0       	rjmp	.+180    	; 0xd02 <UART_init+0x1bc>
		break;

	case UART_7_BIT_MODE:
		SET_BIT(UCSRC, URSEL);
     c4e:	a0 e4       	ldi	r26, 0x40	; 64
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e0 e4       	ldi	r30, 0x40	; 64
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	8c 93       	st	X, r24
		CLR_BIT(UCSRC, UCSZ0);
     c5c:	a0 e4       	ldi	r26, 0x40	; 64
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e0 e4       	ldi	r30, 0x40	; 64
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8d 7f       	andi	r24, 0xFD	; 253
     c68:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	84 60       	ori	r24, 0x04	; 4
     c76:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, UCSZ2);
     c78:	aa e2       	ldi	r26, 0x2A	; 42
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	ea e2       	ldi	r30, 0x2A	; 42
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8b 7f       	andi	r24, 0xFB	; 251
     c84:	8c 93       	st	X, r24
     c86:	3d c0       	rjmp	.+122    	; 0xd02 <UART_init+0x1bc>
		break;
	case UART_8_BIT_MODE:
		SET_BIT(UCSRC, URSEL);
     c88:	a0 e4       	ldi	r26, 0x40	; 64
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e0 e4       	ldi	r30, 0x40	; 64
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ0);
     c96:	a0 e4       	ldi	r26, 0x40	; 64
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e0 e4       	ldi	r30, 0x40	; 64
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	82 60       	ori	r24, 0x02	; 2
     ca2:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
     ca4:	a0 e4       	ldi	r26, 0x40	; 64
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e0 e4       	ldi	r30, 0x40	; 64
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	84 60       	ori	r24, 0x04	; 4
     cb0:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, UCSZ2);
     cb2:	aa e2       	ldi	r26, 0x2A	; 42
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ea e2       	ldi	r30, 0x2A	; 42
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8b 7f       	andi	r24, 0xFB	; 251
     cbe:	8c 93       	st	X, r24
     cc0:	20 c0       	rjmp	.+64     	; 0xd02 <UART_init+0x1bc>

		break;
	case UART_9_BIT_MODE:
		SET_BIT(UCSRC, URSEL);
     cc2:	a0 e4       	ldi	r26, 0x40	; 64
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e0 e4       	ldi	r30, 0x40	; 64
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ0);
     cd0:	a0 e4       	ldi	r26, 0x40	; 64
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e0 e4       	ldi	r30, 0x40	; 64
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	82 60       	ori	r24, 0x02	; 2
     cdc:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
     cde:	a0 e4       	ldi	r26, 0x40	; 64
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
		SET_BIT(UCSRB, UCSZ2);
     cec:	aa e2       	ldi	r26, 0x2A	; 42
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e2       	ldi	r30, 0x2A	; 42
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	8c 93       	st	X, r24
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <UART_init+0x1bc>

		break;
	default:
		return ERROR_NOK;
     cfc:	31 e0       	ldi	r19, 0x01	; 1
     cfe:	3d 83       	std	Y+5, r19	; 0x05
     d00:	f2 c0       	rjmp	.+484    	; 0xee6 <UART_init+0x3a0>
	}
	switch ( uart_config->u8_FlagAction) {
     d02:	e9 81       	ldd	r30, Y+1	; 0x01
     d04:	fa 81       	ldd	r31, Y+2	; 0x02
     d06:	85 81       	ldd	r24, Z+5	; 0x05
     d08:	e8 2f       	mov	r30, r24
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	fc 83       	std	Y+4, r31	; 0x04
     d0e:	eb 83       	std	Y+3, r30	; 0x03
     d10:	2b 81       	ldd	r18, Y+3	; 0x03
     d12:	3c 81       	ldd	r19, Y+4	; 0x04
     d14:	21 15       	cp	r18, r1
     d16:	31 05       	cpc	r19, r1
     d18:	39 f0       	breq	.+14     	; 0xd28 <UART_init+0x1e2>
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <UART_init+0x1e0>
     d24:	72 c0       	rjmp	.+228    	; 0xe0a <UART_init+0x2c4>
     d26:	db c0       	rjmp	.+438    	; 0xede <UART_init+0x398>

	case UART_POLLING:
		SET_BIT(UCSRB, RXEN);
     d28:	aa e2       	ldi	r26, 0x2A	; 42
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e2       	ldi	r30, 0x2A	; 42
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);
     d36:	aa e2       	ldi	r26, 0x2A	; 42
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e2       	ldi	r30, 0x2A	; 42
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	8c 93       	st	X, r24
		CLR_BIT(UBRRH, URSEL);
     d44:	a0 e4       	ldi	r26, 0x40	; 64
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e0 e4       	ldi	r30, 0x40	; 64
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 77       	andi	r24, 0x7F	; 127
     d50:	8c 93       	st	X, r24
	    UBRRL = (uint8_t)(((F_CPU) / (16 * UART_Arr[0])) - 1);
     d52:	09 e2       	ldi	r16, 0x29	; 41
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	80 91 7a 00 	lds	r24, 0x007A
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	82 95       	swap	r24
     d60:	92 95       	swap	r25
     d62:	90 7f       	andi	r25, 0xF0	; 240
     d64:	98 27       	eor	r25, r24
     d66:	80 7f       	andi	r24, 0xF0	; 240
     d68:	98 27       	eor	r25, r24
     d6a:	9c 01       	movw	r18, r24
     d6c:	44 27       	eor	r20, r20
     d6e:	37 fd       	sbrc	r19, 7
     d70:	40 95       	com	r20
     d72:	54 2f       	mov	r21, r20
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	92 e4       	ldi	r25, 0x42	; 66
     d78:	af e0       	ldi	r26, 0x0F	; 15
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
     d84:	da 01       	movw	r26, r20
     d86:	c9 01       	movw	r24, r18
     d88:	81 50       	subi	r24, 0x01	; 1
     d8a:	f8 01       	movw	r30, r16
     d8c:	80 83       	st	Z, r24
		UBRRH = (uint8_t)(((((F_CPU) / (16 * UART_Arr[0])) - 1) & 0x00000F00)>>8);
     d8e:	00 e4       	ldi	r16, 0x40	; 64
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	80 91 7a 00 	lds	r24, 0x007A
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	82 95       	swap	r24
     d9c:	92 95       	swap	r25
     d9e:	90 7f       	andi	r25, 0xF0	; 240
     da0:	98 27       	eor	r25, r24
     da2:	80 7f       	andi	r24, 0xF0	; 240
     da4:	98 27       	eor	r25, r24
     da6:	9c 01       	movw	r18, r24
     da8:	44 27       	eor	r20, r20
     daa:	37 fd       	sbrc	r19, 7
     dac:	40 95       	com	r20
     dae:	54 2f       	mov	r21, r20
     db0:	80 e4       	ldi	r24, 0x40	; 64
     db2:	92 e4       	ldi	r25, 0x42	; 66
     db4:	af e0       	ldi	r26, 0x0F	; 15
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
     dc0:	da 01       	movw	r26, r20
     dc2:	c9 01       	movw	r24, r18
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	a1 09       	sbc	r26, r1
     dc8:	b1 09       	sbc	r27, r1
     dca:	80 70       	andi	r24, 0x00	; 0
     dcc:	9f 70       	andi	r25, 0x0F	; 15
     dce:	a0 70       	andi	r26, 0x00	; 0
     dd0:	b0 70       	andi	r27, 0x00	; 0
     dd2:	89 2f       	mov	r24, r25
     dd4:	9a 2f       	mov	r25, r26
     dd6:	ab 2f       	mov	r26, r27
     dd8:	bb 27       	eor	r27, r27
     dda:	f8 01       	movw	r30, r16
     ddc:	80 83       	st	Z, r24
		CLR_BIT(UCSRB, RXCIE);
     dde:	aa e2       	ldi	r26, 0x2A	; 42
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ea e2       	ldi	r30, 0x2A	; 42
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8f 77       	andi	r24, 0x7F	; 127
     dea:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, TXCIE);
     dec:	aa e2       	ldi	r26, 0x2A	; 42
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ea e2       	ldi	r30, 0x2A	; 42
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8f 7b       	andi	r24, 0xBF	; 191
     df8:	8c 93       	st	X, r24
		CLR_BIT(UCSRB, UDRIE);
     dfa:	aa e2       	ldi	r26, 0x2A	; 42
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ea e2       	ldi	r30, 0x2A	; 42
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7d       	andi	r24, 0xDF	; 223
     e06:	8c 93       	st	X, r24
     e08:	6d c0       	rjmp	.+218    	; 0xee4 <UART_init+0x39e>
		//CLR_BIT(SREG, I);
		break;

	case UART_INTERRUPT:
		SET_BIT(UCSRB, RXEN);
     e0a:	aa e2       	ldi	r26, 0x2A	; 42
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e2       	ldi	r30, 0x2A	; 42
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN);
     e18:	aa e2       	ldi	r26, 0x2A	; 42
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	ea e2       	ldi	r30, 0x2A	; 42
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	88 60       	ori	r24, 0x08	; 8
     e24:	8c 93       	st	X, r24
		CLR_BIT(UBRRH, URSEL);
     e26:	a0 e4       	ldi	r26, 0x40	; 64
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e0 e4       	ldi	r30, 0x40	; 64
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 77       	andi	r24, 0x7F	; 127
     e32:	8c 93       	st	X, r24
		UBRRL = (uint8_t)  ( ( (F_CPU) / (16 * UART_Arr[0])) - 1);
     e34:	09 e2       	ldi	r16, 0x29	; 41
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	80 91 7a 00 	lds	r24, 0x007A
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	82 95       	swap	r24
     e42:	92 95       	swap	r25
     e44:	90 7f       	andi	r25, 0xF0	; 240
     e46:	98 27       	eor	r25, r24
     e48:	80 7f       	andi	r24, 0xF0	; 240
     e4a:	98 27       	eor	r25, r24
     e4c:	9c 01       	movw	r18, r24
     e4e:	44 27       	eor	r20, r20
     e50:	37 fd       	sbrc	r19, 7
     e52:	40 95       	com	r20
     e54:	54 2f       	mov	r21, r20
     e56:	80 e4       	ldi	r24, 0x40	; 64
     e58:	92 e4       	ldi	r25, 0x42	; 66
     e5a:	af e0       	ldi	r26, 0x0F	; 15
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
     e66:	da 01       	movw	r26, r20
     e68:	c9 01       	movw	r24, r18
     e6a:	81 50       	subi	r24, 0x01	; 1
     e6c:	f8 01       	movw	r30, r16
     e6e:	80 83       	st	Z, r24
		UBRRH = (uint8_t)(((((F_CPU) / (16 * UART_Arr[0])) - 1) & 0x00000F00)>>8);
     e70:	00 e4       	ldi	r16, 0x40	; 64
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	80 91 7a 00 	lds	r24, 0x007A
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	82 95       	swap	r24
     e7e:	92 95       	swap	r25
     e80:	90 7f       	andi	r25, 0xF0	; 240
     e82:	98 27       	eor	r25, r24
     e84:	80 7f       	andi	r24, 0xF0	; 240
     e86:	98 27       	eor	r25, r24
     e88:	9c 01       	movw	r18, r24
     e8a:	44 27       	eor	r20, r20
     e8c:	37 fd       	sbrc	r19, 7
     e8e:	40 95       	com	r20
     e90:	54 2f       	mov	r21, r20
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	92 e4       	ldi	r25, 0x42	; 66
     e96:	af e0       	ldi	r26, 0x0F	; 15
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
     ea2:	da 01       	movw	r26, r20
     ea4:	c9 01       	movw	r24, r18
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	a1 09       	sbc	r26, r1
     eaa:	b1 09       	sbc	r27, r1
     eac:	80 70       	andi	r24, 0x00	; 0
     eae:	9f 70       	andi	r25, 0x0F	; 15
     eb0:	a0 70       	andi	r26, 0x00	; 0
     eb2:	b0 70       	andi	r27, 0x00	; 0
     eb4:	89 2f       	mov	r24, r25
     eb6:	9a 2f       	mov	r25, r26
     eb8:	ab 2f       	mov	r26, r27
     eba:	bb 27       	eor	r27, r27
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 83       	st	Z, r24
		SET_BIT(UCSRB, RXCIE);
     ec0:	aa e2       	ldi	r26, 0x2A	; 42
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8c 93       	st	X, r24
		//SET_BIT(UCSRB, TXCIE);
		//SET_BIT(UCSRB, UDRIE);
		 SET_BIT(SREG, I_BIT);
     ece:	af e5       	ldi	r26, 0x5F	; 95
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ef e5       	ldi	r30, 0x5F	; 95
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 68       	ori	r24, 0x80	; 128
     eda:	8c 93       	st	X, r24
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <UART_init+0x39e>

		break;
	default:
		return ERROR_NOK;
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	fd 83       	std	Y+5, r31	; 0x05
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <UART_init+0x3a0>
	//CLR_BIT(UCSRC,UMSEL);
	//SET_BIT(UCSRC,USBS);
	//CLR_BIT(UCSRC,UPM0);
	//CLR_BIT(UCSRC,UPM1);

	return ERROR_OK;
     ee4:	1d 82       	std	Y+5, r1	; 0x05
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ee8:	27 96       	adiw	r28, 0x07	; 7
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	08 95       	ret

00000efe <UART_sendByte>:

extern uint8_t UART_sendByte(const uint8_t u8_Data)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <UART_sendByte+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <UART_sendByte+0x8>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
	switch(UART_Arr[2]){
     f0c:	80 91 7c 00 	lds	r24, 0x007C
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3c 83       	std	Y+4, r19	; 0x04
     f16:	2b 83       	std	Y+3, r18	; 0x03
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	31 f0       	breq	.+12     	; 0xf2c <UART_sendByte+0x2e>
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	21 30       	cpi	r18, 0x01	; 1
     f26:	31 05       	cpc	r19, r1
     f28:	79 f0       	breq	.+30     	; 0xf48 <UART_sendByte+0x4a>
     f2a:	12 c0       	rjmp	.+36     	; 0xf50 <UART_sendByte+0x52>

	case UART_POLLING:

		while(!(BIT_IS_SET(UCSRA,UDRE)) );
     f2c:	eb e2       	ldi	r30, 0x2B	; 43
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	80 72       	andi	r24, 0x20	; 32
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	b9 f3       	breq	.-18     	; 0xf2c <UART_sendByte+0x2e>
		UDR=u8_Data;
     f3e:	ec e2       	ldi	r30, 0x2C	; 44
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	80 83       	st	Z, r24
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <UART_sendByte+0x58>
		break;

	case UART_INTERRUPT:
		T_Data=u8_Data;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	80 93 7e 00 	sts	0x007E, r24
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <UART_sendByte+0x58>
		break;
	default:
		return ERROR_NOK;
     f50:	31 e0       	ldi	r19, 0x01	; 1
     f52:	3a 83       	std	Y+2, r19	; 0x02
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <UART_sendByte+0x5a>
	}

	return ERROR_OK;
     f56:	1a 82       	std	Y+2, r1	; 0x02
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <UART_recieveByte>:

extern uint8_t UART_recieveByte(uint8_t *u8_Data)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <UART_recieveByte+0x6>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <UART_recieveByte+0x8>
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
	switch(UART_Arr[2]){
     f7a:	80 91 7c 00 	lds	r24, 0x007C
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3d 83       	std	Y+5, r19	; 0x05
     f84:	2c 83       	std	Y+4, r18	; 0x04
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	31 f0       	breq	.+12     	; 0xf9a <UART_recieveByte+0x32>
     f8e:	2c 81       	ldd	r18, Y+4	; 0x04
     f90:	3d 81       	ldd	r19, Y+5	; 0x05
     f92:	21 30       	cpi	r18, 0x01	; 1
     f94:	31 05       	cpc	r19, r1
     f96:	69 f0       	breq	.+26     	; 0xfb2 <UART_recieveByte+0x4a>
     f98:	12 c0       	rjmp	.+36     	; 0xfbe <UART_recieveByte+0x56>

	case UART_POLLING:

		while(!(BIT_IS_SET(UCSRA,RXC)) );
     f9a:	eb e2       	ldi	r30, 0x2B	; 43
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	dc f7       	brge	.-10     	; 0xf9a <UART_recieveByte+0x32>
		*u8_Data=UDR;
     fa4:	ec e2       	ldi	r30, 0x2C	; 44
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	e9 81       	ldd	r30, Y+1	; 0x01
     fac:	fa 81       	ldd	r31, Y+2	; 0x02
     fae:	80 83       	st	Z, r24
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <UART_recieveByte+0x5c>
		break;

	case UART_INTERRUPT:
		*u8_Data=R_Data;
     fb2:	80 91 7f 00 	lds	r24, 0x007F
     fb6:	e9 81       	ldd	r30, Y+1	; 0x01
     fb8:	fa 81       	ldd	r31, Y+2	; 0x02
     fba:	80 83       	st	Z, r24
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <UART_recieveByte+0x5c>
		break;
	default:
		return ERROR_NOK;
     fbe:	31 e0       	ldi	r19, 0x01	; 1
     fc0:	3b 83       	std	Y+3, r19	; 0x03
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <UART_recieveByte+0x5e>
	}

	return ERROR_OK;
     fc4:	1b 82       	std	Y+3, r1	; 0x03
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03


}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <PWM_init>:
#include "../Infra_Structure/Std_Types.h"
#include "timer_reg.h"
#include "PWM.h"


void PWM_init(void) {
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(TCCR0, TCCR0_WGM00);
     fe0:	a3 e5       	ldi	r26, 0x53	; 83
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e3 e5       	ldi	r30, 0x53	; 83
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
     fee:	a3 e5       	ldi	r26, 0x53	; 83
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e3 e5       	ldi	r30, 0x53	; 83
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	88 60       	ori	r24, 0x08	; 8
     ffa:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_COM01);
     ffc:	a3 e5       	ldi	r26, 0x53	; 83
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e3 e5       	ldi	r30, 0x53	; 83
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 62       	ori	r24, 0x20	; 32
    1008:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS02);
    100a:	a3 e5       	ldi	r26, 0x53	; 83
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e3 e5       	ldi	r30, 0x53	; 83
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	84 60       	ori	r24, 0x04	; 4
    1016:	8c 93       	st	X, r24
	SET_BIT(DDRB,3);
    1018:	a7 e3       	ldi	r26, 0x37	; 55
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e3       	ldi	r30, 0x37	; 55
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	88 60       	ori	r24, 0x08	; 8
    1024:	8c 93       	st	X, r24
	TCNT0 = 0;
    1026:	e2 e5       	ldi	r30, 0x52	; 82
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	10 82       	st	Z, r1
	OCR0 = 0;
    102c:	ec e5       	ldi	r30, 0x5C	; 92
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	10 82       	st	Z, r1

}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <PWM_Duty_Cycle>:

void PWM_Duty_Cycle(unsigned char Duty_Cycle) {
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Duty_Cycle;
    1044:	ec e5       	ldi	r30, 0x5C	; 92
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	80 83       	st	Z, r24

}
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <PWM_Speed>:

extern uint8_t PWM_Speed(uint8_t speed) {
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <PWM_Speed+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <PWM_Speed+0x8>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	89 83       	std	Y+1, r24	; 0x01
	switch (speed) {
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3c 83       	std	Y+4, r19	; 0x04
    106a:	2b 83       	std	Y+3, r18	; 0x03
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	85 30       	cpi	r24, 0x05	; 5
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <PWM_Speed+0x24>
    1076:	59 c0       	rjmp	.+178    	; 0x112a <PWM_Speed+0xd6>
    1078:	2b 81       	ldd	r18, Y+3	; 0x03
    107a:	3c 81       	ldd	r19, Y+4	; 0x04
    107c:	26 30       	cpi	r18, 0x06	; 6
    107e:	31 05       	cpc	r19, r1
    1080:	04 f5       	brge	.+64     	; 0x10c2 <PWM_Speed+0x6e>
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <PWM_Speed+0x3a>
    108c:	42 c0       	rjmp	.+132    	; 0x1112 <PWM_Speed+0xbe>
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	23 30       	cpi	r18, 0x03	; 3
    1094:	31 05       	cpc	r19, r1
    1096:	54 f4       	brge	.+20     	; 0x10ac <PWM_Speed+0x58>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	89 f1       	breq	.+98     	; 0x1102 <PWM_Speed+0xae>
    10a0:	2b 81       	ldd	r18, Y+3	; 0x03
    10a2:	3c 81       	ldd	r19, Y+4	; 0x04
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	81 f1       	breq	.+96     	; 0x110a <PWM_Speed+0xb6>
    10aa:	57 c0       	rjmp	.+174    	; 0x115a <PWM_Speed+0x106>
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	91 f1       	breq	.+100    	; 0x111a <PWM_Speed+0xc6>
    10b6:	2b 81       	ldd	r18, Y+3	; 0x03
    10b8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ba:	24 30       	cpi	r18, 0x04	; 4
    10bc:	31 05       	cpc	r19, r1
    10be:	89 f1       	breq	.+98     	; 0x1122 <PWM_Speed+0xce>
    10c0:	4c c0       	rjmp	.+152    	; 0x115a <PWM_Speed+0x106>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	91 05       	cpc	r25, r1
    10ca:	d9 f1       	breq	.+118    	; 0x1142 <PWM_Speed+0xee>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	29 30       	cpi	r18, 0x09	; 9
    10d2:	31 05       	cpc	r19, r1
    10d4:	5c f4       	brge	.+22     	; 0x10ec <PWM_Speed+0x98>
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	86 30       	cpi	r24, 0x06	; 6
    10dc:	91 05       	cpc	r25, r1
    10de:	49 f1       	breq	.+82     	; 0x1132 <PWM_Speed+0xde>
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	3c 81       	ldd	r19, Y+4	; 0x04
    10e4:	27 30       	cpi	r18, 0x07	; 7
    10e6:	31 05       	cpc	r19, r1
    10e8:	41 f1       	breq	.+80     	; 0x113a <PWM_Speed+0xe6>
    10ea:	37 c0       	rjmp	.+110    	; 0x115a <PWM_Speed+0x106>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	89 30       	cpi	r24, 0x09	; 9
    10f2:	91 05       	cpc	r25, r1
    10f4:	51 f1       	breq	.+84     	; 0x114a <PWM_Speed+0xf6>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	2a 30       	cpi	r18, 0x0A	; 10
    10fc:	31 05       	cpc	r19, r1
    10fe:	49 f1       	breq	.+82     	; 0x1152 <PWM_Speed+0xfe>
    1100:	2c c0       	rjmp	.+88     	; 0x115a <PWM_Speed+0x106>
	case 0:
		PWM_Duty_Cycle(0);
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1108:	2b c0       	rjmp	.+86     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 1:
		PWM_Duty_Cycle(25);
    110a:	89 e1       	ldi	r24, 0x19	; 25
    110c:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1110:	27 c0       	rjmp	.+78     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 2:
		PWM_Duty_Cycle(50);
    1112:	82 e3       	ldi	r24, 0x32	; 50
    1114:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1118:	23 c0       	rjmp	.+70     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 3:
		PWM_Duty_Cycle(75);
    111a:	8b e4       	ldi	r24, 0x4B	; 75
    111c:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1120:	1f c0       	rjmp	.+62     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 4:
		PWM_Duty_Cycle(100);
    1122:	84 e6       	ldi	r24, 0x64	; 100
    1124:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1128:	1b c0       	rjmp	.+54     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 5:
		PWM_Duty_Cycle(125);
    112a:	8d e7       	ldi	r24, 0x7D	; 125
    112c:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1130:	17 c0       	rjmp	.+46     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 6:
		PWM_Duty_Cycle(150);
    1132:	86 e9       	ldi	r24, 0x96	; 150
    1134:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 7:
		PWM_Duty_Cycle(175);
    113a:	8f ea       	ldi	r24, 0xAF	; 175
    113c:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 8:
		PWM_Duty_Cycle(200);
    1142:	88 ec       	ldi	r24, 0xC8	; 200
    1144:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 9:
		PWM_Duty_Cycle(225);
    114a:	81 ee       	ldi	r24, 0xE1	; 225
    114c:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <PWM_Speed+0x10c>
		break;
	case 10:
		PWM_Duty_Cycle(255);
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	0e 94 1c 08 	call	0x1038	; 0x1038 <PWM_Duty_Cycle>
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <PWM_Speed+0x10c>
		break;
	default:
		return ERROR_NOK;
    115a:	31 e0       	ldi	r19, 0x01	; 1
    115c:	3a 83       	std	Y+2, r19	; 0x02
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <PWM_Speed+0x10e>

	}
	return ERROR_OK;
    1160:	1a 82       	std	Y+2, r1	; 0x02
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <CLCD_voidSendCommand>:

#include "LCD_config.h"
#include "LCD_interface.h"
#include "LCD_private.h"

void CLCD_voidSendCommand(uint8_t Copy_u8Command){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	2f 97       	sbiw	r28, 0x0f	; 15
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin to low for command */
	DIO_u8SetPinValue(CLCD_RS_PIN, DIO_LOW);
    1188:	88 e0       	ldi	r24, 0x08	; 8
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_RW_PIN, DIO_LOW);
    1190:	89 e0       	ldi	r24, 0x09	; 9
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>

	/*Set command to data pins*/
#if (EIGHT_BIT_MODE==CLCD_MODE)
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	6f 85       	ldd	r22, Y+15	; 0x0f
    119c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_D4_PIN, (Copy_u8Command&0b00000001));

#endif

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_E_PIN, DIO_HIGH);
    11a0:	8a e0       	ldi	r24, 0x0A	; 10
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e4       	ldi	r27, 0x40	; 64
    11b0:	8b 87       	std	Y+11, r24	; 0x0b
    11b2:	9c 87       	std	Y+12, r25	; 0x0c
    11b4:	ad 87       	std	Y+13, r26	; 0x0d
    11b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	53 e4       	ldi	r21, 0x43	; 67
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	98 87       	std	Y+8, r25	; 0x08
    11d4:	a9 87       	std	Y+9, r26	; 0x09
    11d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	0f c0       	rjmp	.+30     	; 0x125a <CLCD_voidSendCommand+0xe8>
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <CLCD_voidSendCommand+0xd6>
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f7       	brne	.-38     	; 0x123c <CLCD_voidSendCommand+0xca>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <CLCD_voidSendCommand+0x112>
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_E_PIN, DIO_LOW);
    128c:	8a e0       	ldi	r24, 0x0A	; 10
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>
}
    1294:	2f 96       	adiw	r28, 0x0f	; 15
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8_t Copy_u8Data){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	2f 97       	sbiw	r28, 0x0f	; 15
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	8f 87       	std	Y+15, r24	; 0x0f
	/* Incrementing Address Counter and Checking Increment to next line */
	Local_u8AddressCounter++;
    12bc:	80 91 7d 00 	lds	r24, 0x007D
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	80 93 7d 00 	sts	0x007D, r24
	if(Local_u8AddressCounter==17){
    12c6:	80 91 7d 00 	lds	r24, 0x007D
    12ca:	81 31       	cpi	r24, 0x11	; 17
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <CLCD_voidSendData+0x30>
		CLCD_voidGoToXY(1,1);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <CLCD_voidGoToXY>
	}

	/* Set RS pin to high for data */
	DIO_u8SetPinValue(CLCD_RS_PIN, DIO_HIGH);
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_RW_PIN, DIO_LOW);
    12de:	89 e0       	ldi	r24, 0x09	; 9
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>

#if (EIGHT_BIT_MODE==CLCD_MODE)
	/*Set command to data data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Data);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ea:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_D4_PIN, (Copy_u8Data&0b00000001));

#endif

	/*Send Enable pulse*/
	DIO_u8SetPinValue(CLCD_E_PIN, DIO_HIGH);
    12ee:	8a e0       	ldi	r24, 0x0A	; 10
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 e0       	ldi	r26, 0x00	; 0
    12fc:	b0 e4       	ldi	r27, 0x40	; 64
    12fe:	8b 87       	std	Y+11, r24	; 0x0b
    1300:	9c 87       	std	Y+12, r25	; 0x0c
    1302:	ad 87       	std	Y+13, r26	; 0x0d
    1304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	6b 85       	ldd	r22, Y+11	; 0x0b
    1308:	7c 85       	ldd	r23, Y+12	; 0x0c
    130a:	8d 85       	ldd	r24, Y+13	; 0x0d
    130c:	9e 85       	ldd	r25, Y+14	; 0x0e
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a e7       	ldi	r20, 0x7A	; 122
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8f 83       	std	Y+7, r24	; 0x07
    1320:	98 87       	std	Y+8, r25	; 0x08
    1322:	a9 87       	std	Y+9, r26	; 0x09
    1324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <CLCD_voidSendData+0xa2>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <CLCD_voidSendData+0x120>
	else if (__tmp > 65535)
    1348:	6f 81       	ldd	r22, Y+7	; 0x07
    134a:	78 85       	ldd	r23, Y+8	; 0x08
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <CLCD_voidSendData+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	6b 85       	ldd	r22, Y+11	; 0x0b
    1362:	7c 85       	ldd	r23, Y+12	; 0x0c
    1364:	8d 85       	ldd	r24, Y+13	; 0x0d
    1366:	9e 85       	ldd	r25, Y+14	; 0x0e
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <CLCD_voidSendData+0x102>
    138a:	89 e1       	ldi	r24, 0x19	; 25
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <CLCD_voidSendData+0xf0>
    139a:	9c 83       	std	Y+4, r25	; 0x04
    139c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f7       	brne	.-38     	; 0x138a <CLCD_voidSendData+0xe4>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <CLCD_voidSendData+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	6f 81       	ldd	r22, Y+7	; 0x07
    13b4:	78 85       	ldd	r23, Y+8	; 0x08
    13b6:	89 85       	ldd	r24, Y+9	; 0x09
    13b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <CLCD_voidSendData+0x12c>
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_E_PIN, DIO_LOW);
    13da:	8a e0       	ldi	r24, 0x0A	; 10
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_u8SetPinValue>
}
    13e2:	2f 96       	adiw	r28, 0x0f	; 15
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <CLCD_voidInit>:

void CLCD_voidInit(void){
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	2e 97       	sbiw	r28, 0x0e	; 14
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
	/* Initializing Address Counter */
	Local_u8AddressCounter=0;
    1408:	10 92 7d 00 	sts	0x007D, r1
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 e2       	ldi	r26, 0x20	; 32
    1412:	b2 e4       	ldi	r27, 0x42	; 66
    1414:	8b 87       	std	Y+11, r24	; 0x0b
    1416:	9c 87       	std	Y+12, r25	; 0x0c
    1418:	ad 87       	std	Y+13, r26	; 0x0d
    141a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141c:	6b 85       	ldd	r22, Y+11	; 0x0b
    141e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1420:	8d 85       	ldd	r24, Y+13	; 0x0d
    1422:	9e 85       	ldd	r25, Y+14	; 0x0e
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	4a e7       	ldi	r20, 0x7A	; 122
    142a:	53 e4       	ldi	r21, 0x43	; 67
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	8f 83       	std	Y+7, r24	; 0x07
    1436:	98 87       	std	Y+8, r25	; 0x08
    1438:	a9 87       	std	Y+9, r26	; 0x09
    143a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    143c:	6f 81       	ldd	r22, Y+7	; 0x07
    143e:	78 85       	ldd	r23, Y+8	; 0x08
    1440:	89 85       	ldd	r24, Y+9	; 0x09
    1442:	9a 85       	ldd	r25, Y+10	; 0x0a
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e8       	ldi	r20, 0x80	; 128
    144a:	5f e3       	ldi	r21, 0x3F	; 63
    144c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1450:	88 23       	and	r24, r24
    1452:	2c f4       	brge	.+10     	; 0x145e <CLCD_voidInit+0x6a>
		__ticks = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 83       	std	Y+5, r24	; 0x05
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <CLCD_voidInit+0xe8>
	else if (__tmp > 65535)
    145e:	6f 81       	ldd	r22, Y+7	; 0x07
    1460:	78 85       	ldd	r23, Y+8	; 0x08
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	4c f5       	brge	.+82     	; 0x14c8 <CLCD_voidInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1476:	6b 85       	ldd	r22, Y+11	; 0x0b
    1478:	7c 85       	ldd	r23, Y+12	; 0x0c
    147a:	8d 85       	ldd	r24, Y+13	; 0x0d
    147c:	9e 85       	ldd	r25, Y+14	; 0x0e
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	0f c0       	rjmp	.+30     	; 0x14be <CLCD_voidInit+0xca>
    14a0:	89 e1       	ldi	r24, 0x19	; 25
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 83       	std	Y+4, r25	; 0x04
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <CLCD_voidInit+0xb8>
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	69 f7       	brne	.-38     	; 0x14a0 <CLCD_voidInit+0xac>
    14c6:	14 c0       	rjmp	.+40     	; 0x14f0 <CLCD_voidInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ca:	78 85       	ldd	r23, Y+8	; 0x08
    14cc:	89 85       	ldd	r24, Y+9	; 0x09
    14ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <CLCD_voidInit+0xf4>
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01

	/* Start of CLCD Initilization */
	_delay_ms(40);
#if (EIGHT_BIT_MODE==CLCD_MODE)
	/*Function Set command: 2 lines , 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
    14f0:	88 e3       	ldi	r24, 0x38	; 56
    14f2:	0e 94 b9 08 	call	0x1172	; 0x1172 <CLCD_voidSendCommand>

	/*Function set command: Display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    14f6:	8c e0       	ldi	r24, 0x0C	; 12
    14f8:	0e 94 b9 08 	call	0x1172	; 0x1172 <CLCD_voidSendCommand>

	/*Clear Display*/
	CLCD_voidSendCommand(0b00000001);
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	0e 94 b9 08 	call	0x1172	; 0x1172 <CLCD_voidSendCommand>
	DIO_u8SetPinValue( CLCD_E_PIN, DIO_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue( CLCD_E_PIN, DIO_LOW);

#endif
}
    1502:	2e 96       	adiw	r28, 0x0e	; 14
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString){
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <CLCD_voidSendString+0x6>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	9b 83       	std	Y+3, r25	; 0x03
    1522:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8StringCounter=0;
    1524:	19 82       	std	Y+1, r1	; 0x01
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8StringCounter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8StringCounter]);
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	fc 01       	movw	r30, r24
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	80 81       	ld	r24, Z
    153a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		Local_u8StringCounter++;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void CLCD_voidSendString(const char* Copy_pcString){
	uint8_t Local_u8StringCounter=0;
	while(Copy_pcString[Local_u8StringCounter] != '\0')
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	fc 01       	movw	r30, r24
    1550:	e2 0f       	add	r30, r18
    1552:	f3 1f       	adc	r31, r19
    1554:	80 81       	ld	r24, Z
    1556:	88 23       	and	r24, r24
    1558:	39 f7       	brne	.-50     	; 0x1528 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8StringCounter]);
		Local_u8StringCounter++;
	}
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8_t Copy_u8XPos, uint8_t Copy_u8YPos){
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <CLCD_voidGoToXY+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <CLCD_voidGoToXY+0x8>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	6b 83       	std	Y+3, r22	; 0x03
	/*Accesses DDRAM*/
	uint8_t Local_u8Address=0;
    1578:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8XPos){
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	3d 83       	std	Y+5, r19	; 0x05
    1582:	2c 83       	std	Y+4, r18	; 0x04
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	31 f0       	breq	.+12     	; 0x1598 <CLCD_voidGoToXY+0x32>
    158c:	2c 81       	ldd	r18, Y+4	; 0x04
    158e:	3d 81       	ldd	r19, Y+5	; 0x05
    1590:	21 30       	cpi	r18, 0x01	; 1
    1592:	31 05       	cpc	r19, r1
    1594:	41 f0       	breq	.+16     	; 0x15a6 <CLCD_voidGoToXY+0x40>
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <CLCD_voidGoToXY+0x4a>
	/*First Line Location*/
	case 0:Local_u8Address=Copy_u8YPos; Local_u8AddressCounter=(Copy_u8YPos-1); break;
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	81 50       	subi	r24, 0x01	; 1
    15a0:	80 93 7d 00 	sts	0x007D, r24
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <CLCD_voidGoToXY+0x4a>
	/*Second Line Location*/
	case 1:Local_u8Address=Copy_u8YPos+0x40; Local_u8AddressCounter=0; break;
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	80 5c       	subi	r24, 0xC0	; 192
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	10 92 7d 00 	sts	0x007D, r1
	}
	/*Set Bit 7 for Set DDRAM Address Command then send Command*/
	CLCD_voidSendCommand(Local_u8Address+127);
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	81 58       	subi	r24, 0x81	; 129
    15b4:	0e 94 b9 08 	call	0x1172	; 0x1172 <CLCD_voidSendCommand>
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar(uint8_t* Copy_pu8Pattern, uint8_t Copy_u8PatternNumber){
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <CLCD_voidWriteSpecialChar+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <CLCD_voidWriteSpecialChar+0x8>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	9c 83       	std	Y+4, r25	; 0x04
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t Local_u8CGRAMAddress=0;
    15dc:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8Iterator;

	/*Calculate CGRam Address where each block is 8 byte*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRam Address command to LCD, with Set Bit 6*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	80 5c       	subi	r24, 0xC0	; 192
    15f6:	0e 94 b9 08 	call	0x1172	; 0x1172 <CLCD_voidSendCommand>

	/*Write Patter on CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    15fa:	19 82       	std	Y+1, r1	; 0x01
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <CLCD_voidWriteSpecialChar+0x52>
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	fc 01       	movw	r30, r24
    160a:	e2 0f       	add	r30, r18
    160c:	f3 1f       	adc	r31, r19
    160e:	80 81       	ld	r24, Z
    1610:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>

	/*Send CGRam Address command to LCD, with Set Bit 6*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write Patter on CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 30       	cpi	r24, 0x08	; 8
    161e:	78 f3       	brcs	.-34     	; 0x15fe <CLCD_voidWriteSpecialChar+0x36>
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <CLCD_voidDispSpecialChar>:

void CLCD_voidDispSpecialChar(uint8_t Copy_u8PatternNumber, uint8_t Copy_u8XPos, uint8_t Copy_u8YPos){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <CLCD_voidDispSpecialChar+0x6>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	6a 83       	std	Y+2, r22	; 0x02
    1640:	4b 83       	std	Y+3, r20	; 0x03
	/*Go Back to DDRam to display Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	6b 81       	ldd	r22, Y+3	; 0x03
    1646:	0e 94 b3 0a 	call	0x1566	; 0x1566 <CLCD_voidGoToXY>

	/*Display Pattern written in CGRam*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(uint32_t Copy_u32Number){
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	2a 97       	sbiw	r28, 0x0a	; 10
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	6f 83       	std	Y+7, r22	; 0x07
    1672:	78 87       	std	Y+8, r23	; 0x08
    1674:	89 87       	std	Y+9, r24	; 0x09
    1676:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t Local_u8NumberCounter=0;
    1678:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t Local_u8Iterator=0;
    167a:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t Local_u32NumberPower=10;
    167c:	8a e0       	ldi	r24, 0x0A	; 10
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	ab 83       	std	Y+3, r26	; 0x03
    168a:	bc 83       	std	Y+4, r27	; 0x04
	do{
		Local_u8NumberCounter++;
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8e 83       	std	Y+6, r24	; 0x06
		Local_u8Iterator++;
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32NumberPower=Local_u32NumberPower*10;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	ab 81       	ldd	r26, Y+3	; 0x03
    169e:	bc 81       	ldd	r27, Y+4	; 0x04
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 6d 12 	call	0x24da	; 0x24da <__mulsi3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	ab 83       	std	Y+3, r26	; 0x03
    16ba:	bc 83       	std	Y+4, r27	; 0x04
	}while((Copy_u32Number/(Local_u32NumberPower/10))>0);
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	ab 81       	ldd	r26, Y+3	; 0x03
    16c2:	bc 81       	ldd	r27, Y+4	; 0x04
    16c4:	2a e0       	ldi	r18, 0x0A	; 10
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
    16d4:	da 01       	movw	r26, r20
    16d6:	c9 01       	movw	r24, r18
    16d8:	9c 01       	movw	r18, r24
    16da:	ad 01       	movw	r20, r26
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	98 85       	ldd	r25, Y+8	; 0x08
    16e0:	a9 85       	ldd	r26, Y+9	; 0x09
    16e2:	ba 85       	ldd	r27, Y+10	; 0x0a
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
    16ec:	da 01       	movw	r26, r20
    16ee:	c9 01       	movw	r24, r18
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	a1 05       	cpc	r26, r1
    16f4:	b1 05       	cpc	r27, r1
    16f6:	51 f6       	brne	.-108    	; 0x168c <CLCD_voidWriteNumber+0x30>
	do{
		CLCD_voidSendData('0'+((Copy_u32Number/(Local_u32NumberPower/100))%10));
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	ab 81       	ldd	r26, Y+3	; 0x03
    16fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1700:	24 e6       	ldi	r18, 0x64	; 100
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
    1710:	da 01       	movw	r26, r20
    1712:	c9 01       	movw	r24, r18
    1714:	9c 01       	movw	r18, r24
    1716:	ad 01       	movw	r20, r26
    1718:	8f 81       	ldd	r24, Y+7	; 0x07
    171a:	98 85       	ldd	r25, Y+8	; 0x08
    171c:	a9 85       	ldd	r26, Y+9	; 0x09
    171e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
    1728:	da 01       	movw	r26, r20
    172a:	c9 01       	movw	r24, r18
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	80 5d       	subi	r24, 0xD0	; 208
    1742:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		Local_u8NumberCounter--;
    1746:	8e 81       	ldd	r24, Y+6	; 0x06
    1748:	81 50       	subi	r24, 0x01	; 1
    174a:	8e 83       	std	Y+6, r24	; 0x06
		Local_u32NumberPower/=10;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	ab 81       	ldd	r26, Y+3	; 0x03
    1752:	bc 81       	ldd	r27, Y+4	; 0x04
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 8c 12 	call	0x2518	; 0x2518 <__udivmodsi4>
    1764:	da 01       	movw	r26, r20
    1766:	c9 01       	movw	r24, r18
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	ab 83       	std	Y+3, r26	; 0x03
    176e:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_u8NumberCounter>0);
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	88 23       	and	r24, r24
    1774:	09 f6       	brne	.-126    	; 0x16f8 <CLCD_voidWriteNumber+0x9c>
}
    1776:	2a 96       	adiw	r28, 0x0a	; 10
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <DIO_u8Init_PORT>:
/*Description: Set PORT Direction (INPUT or OUTPUT)
 * Input     : Copy_u8PortNB (PORT Number) ,  Copy_u8Dir (PORT Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8Init_PORT(uint8_t Copy_u8PortNB,uint8_t Copy_u8Dir)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	29 97       	sbiw	r28, 0x09	; 9
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	switch(Copy_u8Dir){
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	39 87       	std	Y+9, r19	; 0x09
    17a8:	28 87       	std	Y+8, r18	; 0x08
    17aa:	88 85       	ldd	r24, Y+8	; 0x08
    17ac:	99 85       	ldd	r25, Y+9	; 0x09
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	e1 f1       	breq	.+120    	; 0x182a <DIO_u8Init_PORT+0xa2>
    17b2:	28 85       	ldd	r18, Y+8	; 0x08
    17b4:	39 85       	ldd	r19, Y+9	; 0x09
    17b6:	21 30       	cpi	r18, 0x01	; 1
    17b8:	31 05       	cpc	r19, r1
    17ba:	09 f0       	breq	.+2      	; 0x17be <DIO_u8Init_PORT+0x36>
    17bc:	68 c0       	rjmp	.+208    	; 0x188e <DIO_u8Init_PORT+0x106>
	case DIO_OUTPUT:
		switch(Copy_u8PortNB){
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3f 83       	std	Y+7, r19	; 0x07
    17c6:	2e 83       	std	Y+6, r18	; 0x06
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	d1 f0       	breq	.+52     	; 0x1806 <DIO_u8Init_PORT+0x7e>
    17d2:	2e 81       	ldd	r18, Y+6	; 0x06
    17d4:	3f 81       	ldd	r19, Y+7	; 0x07
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	2c f4       	brge	.+10     	; 0x17e6 <DIO_u8Init_PORT+0x5e>
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	9f 81       	ldd	r25, Y+7	; 0x07
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	61 f0       	breq	.+24     	; 0x17fc <DIO_u8Init_PORT+0x74>
    17e4:	1f c0       	rjmp	.+62     	; 0x1824 <DIO_u8Init_PORT+0x9c>
    17e6:	2e 81       	ldd	r18, Y+6	; 0x06
    17e8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <DIO_u8Init_PORT+0x88>
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	9f 81       	ldd	r25, Y+7	; 0x07
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	91 05       	cpc	r25, r1
    17f8:	81 f0       	breq	.+32     	; 0x181a <DIO_u8Init_PORT+0x92>
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <DIO_u8Init_PORT+0x9c>
		case DIRECTION_PORT0:DDRA=0xff;break;
    17fc:	ea e3       	ldi	r30, 0x3A	; 58
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 83       	st	Z, r24
    1804:	47 c0       	rjmp	.+142    	; 0x1894 <DIO_u8Init_PORT+0x10c>
		case DIRECTION_PORT1:DDRB=0xff;break;
    1806:	e7 e3       	ldi	r30, 0x37	; 55
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	80 83       	st	Z, r24
    180e:	42 c0       	rjmp	.+132    	; 0x1894 <DIO_u8Init_PORT+0x10c>
		case DIRECTION_PORT2:DDRC=0xff;break;
    1810:	e4 e3       	ldi	r30, 0x34	; 52
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	80 83       	st	Z, r24
    1818:	3d c0       	rjmp	.+122    	; 0x1894 <DIO_u8Init_PORT+0x10c>
		case DIRECTION_PORT3:DDRD=0xff;break;
    181a:	e1 e3       	ldi	r30, 0x31	; 49
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	80 83       	st	Z, r24
    1822:	38 c0       	rjmp	.+112    	; 0x1894 <DIO_u8Init_PORT+0x10c>
		default:return ERROR;
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	9d 83       	std	Y+5, r25	; 0x05
    1828:	36 c0       	rjmp	.+108    	; 0x1896 <DIO_u8Init_PORT+0x10e>
		}
		break;
	case DIO_INPUT:
		switch(Copy_u8PortNB){
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3c 83       	std	Y+4, r19	; 0x04
    1832:	2b 83       	std	Y+3, r18	; 0x03
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	91 05       	cpc	r25, r1
    183c:	c9 f0       	breq	.+50     	; 0x1870 <DIO_u8Init_PORT+0xe8>
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	31 05       	cpc	r19, r1
    1846:	2c f4       	brge	.+10     	; 0x1852 <DIO_u8Init_PORT+0xca>
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	61 f0       	breq	.+24     	; 0x1868 <DIO_u8Init_PORT+0xe0>
    1850:	1b c0       	rjmp	.+54     	; 0x1888 <DIO_u8Init_PORT+0x100>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	3c 81       	ldd	r19, Y+4	; 0x04
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	71 f0       	breq	.+28     	; 0x1878 <DIO_u8Init_PORT+0xf0>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	69 f0       	breq	.+26     	; 0x1880 <DIO_u8Init_PORT+0xf8>
    1866:	10 c0       	rjmp	.+32     	; 0x1888 <DIO_u8Init_PORT+0x100>
		case DIRECTION_PORT0:DDRA=0;break;
    1868:	ea e3       	ldi	r30, 0x3A	; 58
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	10 82       	st	Z, r1
    186e:	12 c0       	rjmp	.+36     	; 0x1894 <DIO_u8Init_PORT+0x10c>
		case DIRECTION_PORT1:DDRB=0;break;
    1870:	e7 e3       	ldi	r30, 0x37	; 55
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	10 82       	st	Z, r1
    1876:	0e c0       	rjmp	.+28     	; 0x1894 <DIO_u8Init_PORT+0x10c>
		case DIRECTION_PORT2:DDRC=0;break;
    1878:	e4 e3       	ldi	r30, 0x34	; 52
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	10 82       	st	Z, r1
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <DIO_u8Init_PORT+0x10c>
		case DIRECTION_PORT3:DDRD=0;break;
    1880:	e1 e3       	ldi	r30, 0x31	; 49
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	10 82       	st	Z, r1
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <DIO_u8Init_PORT+0x10c>
		default:return ERROR;
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	9d 83       	std	Y+5, r25	; 0x05
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <DIO_u8Init_PORT+0x10e>
		}
		break;
	default:return ERROR;
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	2d 83       	std	Y+5, r18	; 0x05
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <DIO_u8Init_PORT+0x10e>
	}
	return NO_ERROR;
    1894:	1d 82       	std	Y+5, r1	; 0x05
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1898:	29 96       	adiw	r28, 0x09	; 9
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <DIO_u8Init_PIN>:
/*Description: Set PIN Direction (INPUT or OUTPUT)
 * Input     :Copy_u8PinNB (PIN Number) ,  Copy_u8Dir (PIN Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8Init_PIN(uint8_t Copy_u8PinN,uint8_t Copy_u8Dir)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <DIO_u8Init_PIN+0x6>
    18b0:	0f 92       	push	r0
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if(Copy_u8PinN > 30){/***************************************************************************************************************************/
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8f 31       	cpi	r24, 0x1F	; 31
    18be:	18 f0       	brcs	.+6      	; 0x18c6 <DIO_u8Init_PIN+0x1c>
		return ERROR;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	e4 c0       	rjmp	.+456    	; 0x1a8e <DIO_u8Init_PIN+0x1e4>
	}
	if(Copy_u8Dir!=DIO_OUTPUT && Copy_u8Dir!=DIO_INPUT){
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	31 f0       	breq	.+12     	; 0x18d8 <DIO_u8Init_PIN+0x2e>
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	88 23       	and	r24, r24
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <DIO_u8Init_PIN+0x2e>
		return ERROR;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	8b 83       	std	Y+3, r24	; 0x03
    18d6:	db c0       	rjmp	.+438    	; 0x1a8e <DIO_u8Init_PIN+0x1e4>
	}
	if(Copy_u8Dir==DIO_OUTPUT){/*********************************************************************************************************************/
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <DIO_u8Init_PIN+0x36>
    18de:	67 c0       	rjmp	.+206    	; 0x19ae <DIO_u8Init_PIN+0x104>
		if(Copy_u8PinN >= PIN_A0  && Copy_u8PinN <= PIN_A7){
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	88 30       	cpi	r24, 0x08	; 8
    18e4:	a0 f4       	brcc	.+40     	; 0x190e <DIO_u8Init_PIN+0x64>
			SET_BIT(DDRA,Copy_u8PinN);
    18e6:	aa e3       	ldi	r26, 0x3A	; 58
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	ea e3       	ldi	r30, 0x3A	; 58
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_u8Init_PIN+0x5a>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_u8Init_PIN+0x56>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	50 c0       	rjmp	.+160    	; 0x19ae <DIO_u8Init_PIN+0x104>
		}
		else if(Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7){
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	88 30       	cpi	r24, 0x08	; 8
    1912:	d0 f0       	brcs	.+52     	; 0x1948 <DIO_u8Init_PIN+0x9e>
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	80 31       	cpi	r24, 0x10	; 16
    1918:	b8 f4       	brcc	.+46     	; 0x1948 <DIO_u8Init_PIN+0x9e>
			SET_BIT(DDRB,(Copy_u8PinN-8));
    191a:	a7 e3       	ldi	r26, 0x37	; 55
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e7 e3       	ldi	r30, 0x37	; 55
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 01       	movw	r18, r24
    192e:	28 50       	subi	r18, 0x08	; 8
    1930:	30 40       	sbci	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_u8Init_PIN+0x94>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_u8Init_PIN+0x90>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	33 c0       	rjmp	.+102    	; 0x19ae <DIO_u8Init_PIN+0x104>
		}
		else if(Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7){
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	80 31       	cpi	r24, 0x10	; 16
    194c:	d0 f0       	brcs	.+52     	; 0x1982 <DIO_u8Init_PIN+0xd8>
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	88 31       	cpi	r24, 0x18	; 24
    1952:	b8 f4       	brcc	.+46     	; 0x1982 <DIO_u8Init_PIN+0xd8>
			SET_BIT(DDRC,(Copy_u8PinN-16));
    1954:	a4 e3       	ldi	r26, 0x34	; 52
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e4 e3       	ldi	r30, 0x34	; 52
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 01       	movw	r18, r24
    1968:	20 51       	subi	r18, 0x10	; 16
    196a:	30 40       	sbci	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_u8Init_PIN+0xce>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_u8Init_PIN+0xca>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	16 c0       	rjmp	.+44     	; 0x19ae <DIO_u8Init_PIN+0x104>
		}
		else{
			SET_BIT(DDRD,(Copy_u8PinN-24));
    1982:	a1 e3       	ldi	r26, 0x31	; 49
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e1 e3       	ldi	r30, 0x31	; 49
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9c 01       	movw	r18, r24
    1996:	28 51       	subi	r18, 0x18	; 24
    1998:	30 40       	sbci	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_u8Init_PIN+0xfc>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_u8Init_PIN+0xf8>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
		}
	}
	if(Copy_u8Dir==DIO_INPUT){
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	88 23       	and	r24, r24
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <DIO_u8Init_PIN+0x10c>
    19b4:	6b c0       	rjmp	.+214    	; 0x1a8c <DIO_u8Init_PIN+0x1e2>
		if (Copy_u8PinN >= PIN_A0 && Copy_u8PinN <= PIN_A7) {
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	88 30       	cpi	r24, 0x08	; 8
    19ba:	a8 f4       	brcc	.+42     	; 0x19e6 <DIO_u8Init_PIN+0x13c>
			CLR_BIT(DDRA,Copy_u8PinN);
    19bc:	aa e3       	ldi	r26, 0x3A	; 58
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ea e3       	ldi	r30, 0x3A	; 58
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_u8Init_PIN+0x130>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_u8Init_PIN+0x12c>
    19de:	80 95       	com	r24
    19e0:	84 23       	and	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	53 c0       	rjmp	.+166    	; 0x1a8c <DIO_u8Init_PIN+0x1e2>
		}
		else if (Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7) {
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	d8 f0       	brcs	.+54     	; 0x1a22 <DIO_u8Init_PIN+0x178>
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	80 31       	cpi	r24, 0x10	; 16
    19f0:	c0 f4       	brcc	.+48     	; 0x1a22 <DIO_u8Init_PIN+0x178>
			CLR_BIT(DDRB,(Copy_u8PinN-8));
    19f2:	a7 e3       	ldi	r26, 0x37	; 55
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e7 e3       	ldi	r30, 0x37	; 55
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 01       	movw	r18, r24
    1a06:	28 50       	subi	r18, 0x08	; 8
    1a08:	30 40       	sbci	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_u8Init_PIN+0x16c>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_u8Init_PIN+0x168>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	35 c0       	rjmp	.+106    	; 0x1a8c <DIO_u8Init_PIN+0x1e2>
		}
		else if (Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7) {
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	80 31       	cpi	r24, 0x10	; 16
    1a26:	d8 f0       	brcs	.+54     	; 0x1a5e <DIO_u8Init_PIN+0x1b4>
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	88 31       	cpi	r24, 0x18	; 24
    1a2c:	c0 f4       	brcc	.+48     	; 0x1a5e <DIO_u8Init_PIN+0x1b4>
			CLR_BIT(DDRC,(Copy_u8PinN-16));
    1a2e:	a4 e3       	ldi	r26, 0x34	; 52
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e4 e3       	ldi	r30, 0x34	; 52
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c 01       	movw	r18, r24
    1a42:	20 51       	subi	r18, 0x10	; 16
    1a44:	30 40       	sbci	r19, 0x00	; 0
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 2e       	mov	r0, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_u8Init_PIN+0x1a8>
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	0a 94       	dec	r0
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <DIO_u8Init_PIN+0x1a4>
    1a56:	80 95       	com	r24
    1a58:	84 23       	and	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	17 c0       	rjmp	.+46     	; 0x1a8c <DIO_u8Init_PIN+0x1e2>
		}
		else {
			CLR_BIT(DDRD,(Copy_u8PinN-24));
    1a5e:	a1 e3       	ldi	r26, 0x31	; 49
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e1 e3       	ldi	r30, 0x31	; 49
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 01       	movw	r18, r24
    1a72:	28 51       	subi	r18, 0x18	; 24
    1a74:	30 40       	sbci	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_u8Init_PIN+0x1d8>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_u8Init_PIN+0x1d4>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
		}
	}
	return NO_ERROR;
    1a8c:	1b 82       	std	Y+3, r1	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <DIO_u8SetPortValue>:
/*Description: Set PORT Value (from 0 to 255)
 * Input     : Copy_u8PortNB (PORT Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortValue(uint8_t Copy_u8PortNB,uint8_t Copy_u8Value)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_u8SetPortValue+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <DIO_u8SetPortValue+0x8>
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	switch(Copy_u8PortNB){
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3d 83       	std	Y+5, r19	; 0x05
    1ab6:	2c 83       	std	Y+4, r18	; 0x04
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	d1 f0       	breq	.+52     	; 0x1af6 <DIO_u8SetPortValue+0x5a>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <DIO_u8SetPortValue+0x3a>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <DIO_u8SetPortValue+0x50>
    1ad4:	1f c0       	rjmp	.+62     	; 0x1b14 <DIO_u8SetPortValue+0x78>
    1ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <DIO_u8SetPortValue+0x64>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <DIO_u8SetPortValue+0x6e>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <DIO_u8SetPortValue+0x78>
	case VALUE_PORT0: PORTA=Copy_u8Value; break;
    1aec:	eb e3       	ldi	r30, 0x3B	; 59
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 83       	st	Z, r24
    1af4:	12 c0       	rjmp	.+36     	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	case VALUE_PORT1: PORTB=Copy_u8Value; break;
    1af6:	e8 e3       	ldi	r30, 0x38	; 56
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	80 83       	st	Z, r24
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	case VALUE_PORT2: PORTC=Copy_u8Value; break;
    1b00:	e5 e3       	ldi	r30, 0x35	; 53
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
    1b08:	08 c0       	rjmp	.+16     	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	case VALUE_PORT3: PORTD=Copy_u8Value; break;
    1b0a:	e2 e3       	ldi	r30, 0x32	; 50
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <DIO_u8SetPortValue+0x7e>
	default: return ERROR;
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	9b 83       	std	Y+3, r25	; 0x03
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <DIO_u8SetPortValue+0x80>
	}
	return NO_ERROR;
    1b1a:	1b 82       	std	Y+3, r1	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <DIO_u8SetPinValue>:
/*Description: Set PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinNB (PIN Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinValue(uint8_t Copy_u8PinN,uint8_t Copy_u8Value)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <DIO_u8SetPinValue+0x6>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if(Copy_u8PinN>30){
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	8f 31       	cpi	r24, 0x1F	; 31
    1b42:	18 f0       	brcs	.+6      	; 0x1b4a <DIO_u8SetPinValue+0x1c>
		return ERROR;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	e4 c0       	rjmp	.+456    	; 0x1d12 <DIO_u8SetPinValue+0x1e4>
	}
	if(Copy_u8Value!=DIO_LOW&&Copy_u8Value!=DIO_HIGH){
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	88 23       	and	r24, r24
    1b4e:	31 f0       	breq	.+12     	; 0x1b5c <DIO_u8SetPinValue+0x2e>
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	19 f0       	breq	.+6      	; 0x1b5c <DIO_u8SetPinValue+0x2e>
		return ERROR;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	db c0       	rjmp	.+438    	; 0x1d12 <DIO_u8SetPinValue+0x1e4>
	}
	if (Copy_u8Value == DIO_HIGH) {/*********************************************************************************************************************/
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <DIO_u8SetPinValue+0x36>
    1b62:	67 c0       	rjmp	.+206    	; 0x1c32 <DIO_u8SetPinValue+0x104>
		if (Copy_u8PinN >= PIN_A0 && Copy_u8PinN <= PIN_A7) {
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	88 30       	cpi	r24, 0x08	; 8
    1b68:	a0 f4       	brcc	.+40     	; 0x1b92 <DIO_u8SetPinValue+0x64>
			SET_BIT(PORTA, Copy_u8PinN);
    1b6a:	ab e3       	ldi	r26, 0x3B	; 59
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	eb e3       	ldi	r30, 0x3B	; 59
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <DIO_u8SetPinValue+0x5a>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <DIO_u8SetPinValue+0x56>
    1b8c:	84 2b       	or	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	50 c0       	rjmp	.+160    	; 0x1c32 <DIO_u8SetPinValue+0x104>
		}
		else if (Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7) {
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	88 30       	cpi	r24, 0x08	; 8
    1b96:	d0 f0       	brcs	.+52     	; 0x1bcc <DIO_u8SetPinValue+0x9e>
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	80 31       	cpi	r24, 0x10	; 16
    1b9c:	b8 f4       	brcc	.+46     	; 0x1bcc <DIO_u8SetPinValue+0x9e>
			SET_BIT(PORTB,(Copy_u8PinN - 8));
    1b9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e8 e3       	ldi	r30, 0x38	; 56
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	28 50       	subi	r18, 0x08	; 8
    1bb4:	30 40       	sbci	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <DIO_u8SetPinValue+0x94>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <DIO_u8SetPinValue+0x90>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	33 c0       	rjmp	.+102    	; 0x1c32 <DIO_u8SetPinValue+0x104>
		}
		else if (Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7) {
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	80 31       	cpi	r24, 0x10	; 16
    1bd0:	d0 f0       	brcs	.+52     	; 0x1c06 <DIO_u8SetPinValue+0xd8>
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	88 31       	cpi	r24, 0x18	; 24
    1bd6:	b8 f4       	brcc	.+46     	; 0x1c06 <DIO_u8SetPinValue+0xd8>
			SET_BIT(PORTC,(Copy_u8PinN - 16));
    1bd8:	a5 e3       	ldi	r26, 0x35	; 53
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e3       	ldi	r30, 0x35	; 53
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9c 01       	movw	r18, r24
    1bec:	20 51       	subi	r18, 0x10	; 16
    1bee:	30 40       	sbci	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_u8SetPinValue+0xce>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_u8SetPinValue+0xca>
    1c00:	84 2b       	or	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	16 c0       	rjmp	.+44     	; 0x1c32 <DIO_u8SetPinValue+0x104>
		}
		else {
			SET_BIT(PORTD,(Copy_u8PinN - 24));
    1c06:	a2 e3       	ldi	r26, 0x32	; 50
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e2 e3       	ldi	r30, 0x32	; 50
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 01       	movw	r18, r24
    1c1a:	28 51       	subi	r18, 0x18	; 24
    1c1c:	30 40       	sbci	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <DIO_u8SetPinValue+0xfc>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <DIO_u8SetPinValue+0xf8>
    1c2e:	84 2b       	or	r24, r20
    1c30:	8c 93       	st	X, r24
		}
	}
	if (Copy_u8Value == DIO_LOW) {
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	88 23       	and	r24, r24
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <DIO_u8SetPinValue+0x10c>
    1c38:	6b c0       	rjmp	.+214    	; 0x1d10 <DIO_u8SetPinValue+0x1e2>
		if (Copy_u8PinN >= PIN_A0 && Copy_u8PinN <= PIN_A7) {
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	88 30       	cpi	r24, 0x08	; 8
    1c3e:	a8 f4       	brcc	.+42     	; 0x1c6a <DIO_u8SetPinValue+0x13c>
			CLR_BIT(PORTA,(Copy_u8PinN));
    1c40:	ab e3       	ldi	r26, 0x3B	; 59
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	eb e3       	ldi	r30, 0x3B	; 59
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_u8SetPinValue+0x130>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_u8SetPinValue+0x12c>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	53 c0       	rjmp	.+166    	; 0x1d10 <DIO_u8SetPinValue+0x1e2>
		}
		else if (Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7) {
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	88 30       	cpi	r24, 0x08	; 8
    1c6e:	d8 f0       	brcs	.+54     	; 0x1ca6 <DIO_u8SetPinValue+0x178>
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	80 31       	cpi	r24, 0x10	; 16
    1c74:	c0 f4       	brcc	.+48     	; 0x1ca6 <DIO_u8SetPinValue+0x178>
			CLR_BIT(PORTB,(Copy_u8PinN - 8));
    1c76:	a8 e3       	ldi	r26, 0x38	; 56
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e8 e3       	ldi	r30, 0x38	; 56
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 01       	movw	r18, r24
    1c8a:	28 50       	subi	r18, 0x08	; 8
    1c8c:	30 40       	sbci	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_u8SetPinValue+0x16c>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <DIO_u8SetPinValue+0x168>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	35 c0       	rjmp	.+106    	; 0x1d10 <DIO_u8SetPinValue+0x1e2>
		}
		else if (Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7) {
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	80 31       	cpi	r24, 0x10	; 16
    1caa:	d8 f0       	brcs	.+54     	; 0x1ce2 <DIO_u8SetPinValue+0x1b4>
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	88 31       	cpi	r24, 0x18	; 24
    1cb0:	c0 f4       	brcc	.+48     	; 0x1ce2 <DIO_u8SetPinValue+0x1b4>
			CLR_BIT(PORTC,(Copy_u8PinN - 16));
    1cb2:	a5 e3       	ldi	r26, 0x35	; 53
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e5 e3       	ldi	r30, 0x35	; 53
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	20 51       	subi	r18, 0x10	; 16
    1cc8:	30 40       	sbci	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_u8SetPinValue+0x1a8>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_u8SetPinValue+0x1a4>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	17 c0       	rjmp	.+46     	; 0x1d10 <DIO_u8SetPinValue+0x1e2>
		}
		else {
			CLR_BIT(PORTD,(Copy_u8PinN - 24));
    1ce2:	a2 e3       	ldi	r26, 0x32	; 50
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e2 e3       	ldi	r30, 0x32	; 50
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 01       	movw	r18, r24
    1cf6:	28 51       	subi	r18, 0x18	; 24
    1cf8:	30 40       	sbci	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_u8SetPinValue+0x1d8>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <DIO_u8SetPinValue+0x1d4>
    1d0a:	80 95       	com	r24
    1d0c:	84 23       	and	r24, r20
    1d0e:	8c 93       	st	X, r24
		}
	}
	return NO_ERROR;
    1d10:	1b 82       	std	Y+3, r1	; 0x03
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <DIO_u8GetPortValue>:
/*Description: Get PORT Value
 * Input     :  Copy_u8PortNB (PORT Number),*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPortValue(uint8_t Copy_u8PortNB,uint8_t *Copy_u8Value)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_u8GetPortValue+0x6>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <DIO_u8GetPortValue+0x8>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <DIO_u8GetPortValue+0xa>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	7b 83       	std	Y+3, r23	; 0x03
    1d32:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if (Copy_u8Value == NULL)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	19 f4       	brne	.+6      	; 0x1d42 <DIO_u8GetPortValue+0x22>
	{
		return ERROR;
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	2e 83       	std	Y+6, r18	; 0x06
    1d40:	3f c0       	rjmp	.+126    	; 0x1dc0 <DIO_u8GetPortValue+0xa0>
	}
	switch(Copy_u8PortNB){
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	3d 83       	std	Y+5, r19	; 0x05
    1d4a:	2c 83       	std	Y+4, r18	; 0x04
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	91 05       	cpc	r25, r1
    1d54:	e1 f0       	breq	.+56     	; 0x1d8e <DIO_u8GetPortValue+0x6e>
    1d56:	2c 81       	ldd	r18, Y+4	; 0x04
    1d58:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <DIO_u8GetPortValue+0x4a>
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	61 f0       	breq	.+24     	; 0x1d80 <DIO_u8GetPortValue+0x60>
    1d68:	27 c0       	rjmp	.+78     	; 0x1db8 <DIO_u8GetPortValue+0x98>
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	a1 f0       	breq	.+40     	; 0x1d9c <DIO_u8GetPortValue+0x7c>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	b1 f0       	breq	.+44     	; 0x1daa <DIO_u8GetPortValue+0x8a>
    1d7e:	1c c0       	rjmp	.+56     	; 0x1db8 <DIO_u8GetPortValue+0x98>
		case VALUE_PORT0:
			*Copy_u8Value = PINA;
    1d80:	e9 e3       	ldi	r30, 0x39	; 57
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	ea 81       	ldd	r30, Y+2	; 0x02
    1d88:	fb 81       	ldd	r31, Y+3	; 0x03
    1d8a:	80 83       	st	Z, r24
    1d8c:	18 c0       	rjmp	.+48     	; 0x1dbe <DIO_u8GetPortValue+0x9e>
			break;
		case VALUE_PORT1:
			*Copy_u8Value = PINB;
    1d8e:	e6 e3       	ldi	r30, 0x36	; 54
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	ea 81       	ldd	r30, Y+2	; 0x02
    1d96:	fb 81       	ldd	r31, Y+3	; 0x03
    1d98:	80 83       	st	Z, r24
    1d9a:	11 c0       	rjmp	.+34     	; 0x1dbe <DIO_u8GetPortValue+0x9e>
			break;
		case VALUE_PORT2:
			*Copy_u8Value = PINC;
    1d9c:	e3 e3       	ldi	r30, 0x33	; 51
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	ea 81       	ldd	r30, Y+2	; 0x02
    1da4:	fb 81       	ldd	r31, Y+3	; 0x03
    1da6:	80 83       	st	Z, r24
    1da8:	0a c0       	rjmp	.+20     	; 0x1dbe <DIO_u8GetPortValue+0x9e>
			break;
		case VALUE_PORT3:
			*Copy_u8Value = PIND;
    1daa:	e0 e3       	ldi	r30, 0x30	; 48
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	ea 81       	ldd	r30, Y+2	; 0x02
    1db2:	fb 81       	ldd	r31, Y+3	; 0x03
    1db4:	80 83       	st	Z, r24
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <DIO_u8GetPortValue+0x9e>
			break;
		default:return ERROR;
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	01 c0       	rjmp	.+2      	; 0x1dc0 <DIO_u8GetPortValue+0xa0>
	}
	return NO_ERROR;
    1dbe:	1e 82       	std	Y+6, r1	; 0x06
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1dc2:	26 96       	adiw	r28, 0x06	; 6
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <DIO_u8GetPinValue>:
/*Description: Get PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinN (PIN Number) ,*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPinValue(uint8_t Copy_u8PinN,uint8_t *Copy_u8Value)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <DIO_u8GetPinValue+0x6>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <DIO_u8GetPinValue+0x8>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	7b 83       	std	Y+3, r23	; 0x03
    1de4:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if (Copy_u8Value == NULL)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	19 f4       	brne	.+6      	; 0x1df4 <DIO_u8GetPinValue+0x20>
	{
		return ERROR;
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	4c 83       	std	Y+4, r20	; 0x04
    1df2:	68 c0       	rjmp	.+208    	; 0x1ec4 <DIO_u8GetPinValue+0xf0>
	}
	if(Copy_u8PinN>30){
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	8f 31       	cpi	r24, 0x1F	; 31
    1df8:	18 f0       	brcs	.+6      	; 0x1e00 <DIO_u8GetPinValue+0x2c>
		return ERROR;
    1dfa:	51 e0       	ldi	r21, 0x01	; 1
    1dfc:	5c 83       	std	Y+4, r21	; 0x04
    1dfe:	62 c0       	rjmp	.+196    	; 0x1ec4 <DIO_u8GetPinValue+0xf0>
	}
	if (Copy_u8PinN >= PIN_A0 && Copy_u8PinN <= PIN_A7) {
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	88 30       	cpi	r24, 0x08	; 8
    1e04:	a0 f4       	brcc	.+40     	; 0x1e2e <DIO_u8GetPinValue+0x5a>
		*Copy_u8Value=GET_BIT(PINA,Copy_u8PinN);
    1e06:	e9 e3       	ldi	r30, 0x39	; 57
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a9 01       	movw	r20, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_u8GetPinValue+0x4a>
    1e1a:	55 95       	asr	r21
    1e1c:	47 95       	ror	r20
    1e1e:	8a 95       	dec	r24
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_u8GetPinValue+0x46>
    1e22:	ca 01       	movw	r24, r20
    1e24:	81 70       	andi	r24, 0x01	; 1
    1e26:	ea 81       	ldd	r30, Y+2	; 0x02
    1e28:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2a:	80 83       	st	Z, r24
    1e2c:	4a c0       	rjmp	.+148    	; 0x1ec2 <DIO_u8GetPinValue+0xee>
	}
	else if (Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7) {
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 30       	cpi	r24, 0x08	; 8
    1e32:	c0 f0       	brcs	.+48     	; 0x1e64 <DIO_u8GetPinValue+0x90>
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	80 31       	cpi	r24, 0x10	; 16
    1e38:	a8 f4       	brcc	.+42     	; 0x1e64 <DIO_u8GetPinValue+0x90>
		*Copy_u8Value=GET_BIT(PINB,(Copy_u8PinN-8));
    1e3a:	e6 e3       	ldi	r30, 0x36	; 54
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	08 97       	sbiw	r24, 0x08	; 8
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <DIO_u8GetPinValue+0x80>
    1e50:	55 95       	asr	r21
    1e52:	47 95       	ror	r20
    1e54:	8a 95       	dec	r24
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <DIO_u8GetPinValue+0x7c>
    1e58:	ca 01       	movw	r24, r20
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e60:	80 83       	st	Z, r24
    1e62:	2f c0       	rjmp	.+94     	; 0x1ec2 <DIO_u8GetPinValue+0xee>
	}
	else if (Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7) {
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	80 31       	cpi	r24, 0x10	; 16
    1e68:	c0 f0       	brcs	.+48     	; 0x1e9a <DIO_u8GetPinValue+0xc6>
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	88 31       	cpi	r24, 0x18	; 24
    1e6e:	a8 f4       	brcc	.+42     	; 0x1e9a <DIO_u8GetPinValue+0xc6>
		*Copy_u8Value=GET_BIT(PINC,(Copy_u8PinN-16));
    1e70:	e3 e3       	ldi	r30, 0x33	; 51
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	40 97       	sbiw	r24, 0x10	; 16
    1e82:	a9 01       	movw	r20, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_u8GetPinValue+0xb6>
    1e86:	55 95       	asr	r21
    1e88:	47 95       	ror	r20
    1e8a:	8a 95       	dec	r24
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_u8GetPinValue+0xb2>
    1e8e:	ca 01       	movw	r24, r20
    1e90:	81 70       	andi	r24, 0x01	; 1
    1e92:	ea 81       	ldd	r30, Y+2	; 0x02
    1e94:	fb 81       	ldd	r31, Y+3	; 0x03
    1e96:	80 83       	st	Z, r24
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <DIO_u8GetPinValue+0xee>
	}
	else{
		*Copy_u8Value=GET_BIT(PIND,(Copy_u8PinN-24));
    1e9a:	e0 e3       	ldi	r30, 0x30	; 48
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	48 97       	sbiw	r24, 0x18	; 24
    1eac:	a9 01       	movw	r20, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_u8GetPinValue+0xe0>
    1eb0:	55 95       	asr	r21
    1eb2:	47 95       	ror	r20
    1eb4:	8a 95       	dec	r24
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_u8GetPinValue+0xdc>
    1eb8:	ca 01       	movw	r24, r20
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ebe:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec0:	80 83       	st	Z, r24
	}
	return NO_ERROR;
    1ec2:	1c 82       	std	Y+4, r1	; 0x04
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <DIO_u8SetPortInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortInputType(uint8_t Copy_u8PortNB,uint8_t Copy_u8InputType)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	29 97       	sbiw	r28, 0x09	; 9
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	switch(Copy_u8InputType){
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	39 87       	std	Y+9, r19	; 0x09
    1ef4:	28 87       	std	Y+8, r18	; 0x08
    1ef6:	88 85       	ldd	r24, Y+8	; 0x08
    1ef8:	99 85       	ldd	r25, Y+9	; 0x09
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <DIO_u8SetPortInputType+0x2c>
    1efe:	59 c0       	rjmp	.+178    	; 0x1fb2 <DIO_u8SetPortInputType+0xde>
    1f00:	28 85       	ldd	r18, Y+8	; 0x08
    1f02:	39 85       	ldd	r19, Y+9	; 0x09
    1f04:	21 30       	cpi	r18, 0x01	; 1
    1f06:	31 05       	cpc	r19, r1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <DIO_u8SetPortInputType+0x38>
    1f0a:	a2 c0       	rjmp	.+324    	; 0x2050 <DIO_u8SetPortInputType+0x17c>
	case 1:
		switch(Copy_u8InputType){
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3f 83       	std	Y+7, r19	; 0x07
    1f14:	2e 83       	std	Y+6, r18	; 0x06
    1f16:	8e 81       	ldd	r24, Y+6	; 0x06
    1f18:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	11 f1       	breq	.+68     	; 0x1f64 <DIO_u8SetPortInputType+0x90>
    1f20:	2e 81       	ldd	r18, Y+6	; 0x06
    1f22:	3f 81       	ldd	r19, Y+7	; 0x07
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <DIO_u8SetPortInputType+0x60>
    1f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	61 f0       	breq	.+24     	; 0x1f4a <DIO_u8SetPortInputType+0x76>
    1f32:	91 c0       	rjmp	.+290    	; 0x2056 <DIO_u8SetPortInputType+0x182>
    1f34:	2e 81       	ldd	r18, Y+6	; 0x06
    1f36:	3f 81       	ldd	r19, Y+7	; 0x07
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	01 f1       	breq	.+64     	; 0x1f7e <DIO_u8SetPortInputType+0xaa>
    1f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f40:	9f 81       	ldd	r25, Y+7	; 0x07
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	91 05       	cpc	r25, r1
    1f46:	41 f1       	breq	.+80     	; 0x1f98 <DIO_u8SetPortInputType+0xc4>
    1f48:	86 c0       	rjmp	.+268    	; 0x2056 <DIO_u8SetPortInputType+0x182>
		case VALUE_PORT0:
		{
			if(DDRA == 0x00)
    1f4a:	ea e3       	ldi	r30, 0x3A	; 58
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 23       	and	r24, r24
    1f52:	29 f4       	brne	.+10     	; 0x1f5e <DIO_u8SetPortInputType+0x8a>
				PORTA = 0xff;
    1f54:	eb e3       	ldi	r30, 0x3B	; 59
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	80 83       	st	Z, r24
    1f5c:	7c c0       	rjmp	.+248    	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	9d 83       	std	Y+5, r25	; 0x05
    1f62:	7a c0       	rjmp	.+244    	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		case VALUE_PORT1:
		{
			if (DDRB == 0x00)
    1f64:	e7 e3       	ldi	r30, 0x37	; 55
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	88 23       	and	r24, r24
    1f6c:	29 f4       	brne	.+10     	; 0x1f78 <DIO_u8SetPortInputType+0xa4>
				PORTB = 0xff;
    1f6e:	e8 e3       	ldi	r30, 0x38	; 56
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	80 83       	st	Z, r24
    1f76:	6f c0       	rjmp	.+222    	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    1f78:	21 e0       	ldi	r18, 0x01	; 1
    1f7a:	2d 83       	std	Y+5, r18	; 0x05
    1f7c:	6d c0       	rjmp	.+218    	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		case VALUE_PORT2:
		{
			if (DDRC == 0x00)
    1f7e:	e4 e3       	ldi	r30, 0x34	; 52
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	88 23       	and	r24, r24
    1f86:	29 f4       	brne	.+10     	; 0x1f92 <DIO_u8SetPortInputType+0xbe>
				PORTC = 0xff;
    1f88:	e5 e3       	ldi	r30, 0x35	; 53
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	80 83       	st	Z, r24
    1f90:	62 c0       	rjmp	.+196    	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    1f92:	31 e0       	ldi	r19, 0x01	; 1
    1f94:	3d 83       	std	Y+5, r19	; 0x05
    1f96:	60 c0       	rjmp	.+192    	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		case VALUE_PORT3:
		{
			if (DDRD == 0x00)
    1f98:	e1 e3       	ldi	r30, 0x31	; 49
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	29 f4       	brne	.+10     	; 0x1fac <DIO_u8SetPortInputType+0xd8>
				PORTD = 0xff;
    1fa2:	e2 e3       	ldi	r30, 0x32	; 50
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	80 83       	st	Z, r24
    1faa:	55 c0       	rjmp	.+170    	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	53 c0       	rjmp	.+166    	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		}
		break;
	case 0:
		switch (Copy_u8InputType) {
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	3c 83       	std	Y+4, r19	; 0x04
    1fba:	2b 83       	std	Y+3, r18	; 0x03
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	09 f1       	breq	.+66     	; 0x2008 <DIO_u8SetPortInputType+0x134>
    1fc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	2c f4       	brge	.+10     	; 0x1fda <DIO_u8SetPortInputType+0x106>
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	61 f0       	breq	.+24     	; 0x1ff0 <DIO_u8SetPortInputType+0x11c>
    1fd8:	3e c0       	rjmp	.+124    	; 0x2056 <DIO_u8SetPortInputType+0x182>
    1fda:	2b 81       	ldd	r18, Y+3	; 0x03
    1fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	f1 f0       	breq	.+60     	; 0x2020 <DIO_u8SetPortInputType+0x14c>
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	91 05       	cpc	r25, r1
    1fec:	29 f1       	breq	.+74     	; 0x2038 <DIO_u8SetPortInputType+0x164>
    1fee:	33 c0       	rjmp	.+102    	; 0x2056 <DIO_u8SetPortInputType+0x182>
		case VALUE_PORT0:
		{
			if (DDRA == 0x00)
    1ff0:	ea e3       	ldi	r30, 0x3A	; 58
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <DIO_u8SetPortInputType+0x12e>
				PORTA = 0x00;
    1ffa:	eb e3       	ldi	r30, 0x3B	; 59
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	10 82       	st	Z, r1
    2000:	2a c0       	rjmp	.+84     	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	9d 83       	std	Y+5, r25	; 0x05
    2006:	28 c0       	rjmp	.+80     	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		case VALUE_PORT1:
		{
			if (DDRB == 0x00)
    2008:	e7 e3       	ldi	r30, 0x37	; 55
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	21 f4       	brne	.+8      	; 0x201a <DIO_u8SetPortInputType+0x146>
				PORTB = 0x00;
    2012:	e8 e3       	ldi	r30, 0x38	; 56
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	10 82       	st	Z, r1
    2018:	1e c0       	rjmp	.+60     	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    201a:	21 e0       	ldi	r18, 0x01	; 1
    201c:	2d 83       	std	Y+5, r18	; 0x05
    201e:	1c c0       	rjmp	.+56     	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		case VALUE_PORT2:
		{
			if (DDRC == 0x00)
    2020:	e4 e3       	ldi	r30, 0x34	; 52
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	88 23       	and	r24, r24
    2028:	21 f4       	brne	.+8      	; 0x2032 <DIO_u8SetPortInputType+0x15e>
				PORTC = 0x00;
    202a:	e5 e3       	ldi	r30, 0x35	; 53
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	10 82       	st	Z, r1
    2030:	12 c0       	rjmp	.+36     	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    2032:	31 e0       	ldi	r19, 0x01	; 1
    2034:	3d 83       	std	Y+5, r19	; 0x05
    2036:	10 c0       	rjmp	.+32     	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		case VALUE_PORT3:
		{
			if (DDRD == 0x00)
    2038:	e1 e3       	ldi	r30, 0x31	; 49
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	88 23       	and	r24, r24
    2040:	21 f4       	brne	.+8      	; 0x204a <DIO_u8SetPortInputType+0x176>
				PORTD = 0x00;
    2042:	e2 e3       	ldi	r30, 0x32	; 50
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	10 82       	st	Z, r1
    2048:	06 c0       	rjmp	.+12     	; 0x2056 <DIO_u8SetPortInputType+0x182>
			else

				return ERROR;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <DIO_u8SetPortInputType+0x184>
		}break;
		}
		break;
	default:return ERROR;
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	9d 83       	std	Y+5, r25	; 0x05
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <DIO_u8SetPortInputType+0x184>
	}
	return NO_ERROR;
    2056:	1d 82       	std	Y+5, r1	; 0x05
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
}
    205a:	29 96       	adiw	r28, 0x09	; 9
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <DIO_u8SetPinInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     : Copy_u8PinN(PIN NO) ,Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinInputType(uint8_t Copy_u8PinN,uint8_t Copy_u8InputType)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <DIO_u8SetPinInputType+0x6>
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if( Copy_u8PinN>30 ){
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	8f 31       	cpi	r24, 0x1F	; 31
    2080:	18 f0       	brcs	.+6      	; 0x2088 <DIO_u8SetPinInputType+0x1c>
		return ERROR;
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	4b 83       	std	Y+3, r20	; 0x03
    2086:	9c c1       	rjmp	.+824    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
	}
	if(Copy_u8InputType!=1 && Copy_u8InputType!=0){
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	31 f0       	breq	.+12     	; 0x209a <DIO_u8SetPinInputType+0x2e>
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	88 23       	and	r24, r24
    2092:	19 f0       	breq	.+6      	; 0x209a <DIO_u8SetPinInputType+0x2e>
		return ERROR;
    2094:	51 e0       	ldi	r21, 0x01	; 1
    2096:	5b 83       	std	Y+3, r21	; 0x03
    2098:	93 c1       	rjmp	.+806    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
	}
	if(Copy_u8InputType==1){
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <DIO_u8SetPinInputType+0x36>
    20a0:	c3 c0       	rjmp	.+390    	; 0x2228 <DIO_u8SetPinInputType+0x1bc>
		if (Copy_u8PinN >= PIN_A0 && Copy_u8PinN <= PIN_A7) {
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 30       	cpi	r24, 0x08	; 8
    20a6:	50 f5       	brcc	.+84     	; 0x20fc <DIO_u8SetPinInputType+0x90>
			if(!GET_BIT(DDRA,Copy_u8PinN))
    20a8:	ea e3       	ldi	r30, 0x3A	; 58
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a9 01       	movw	r20, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <DIO_u8SetPinInputType+0x54>
    20bc:	55 95       	asr	r21
    20be:	47 95       	ror	r20
    20c0:	8a 95       	dec	r24
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <DIO_u8SetPinInputType+0x50>
    20c4:	ca 01       	movw	r24, r20
    20c6:	81 70       	andi	r24, 0x01	; 1
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	a1 f4       	brne	.+40     	; 0x20f6 <DIO_u8SetPinInputType+0x8a>
				SET_BIT(PORTA,Copy_u8PinN);
    20ce:	ab e3       	ldi	r26, 0x3B	; 59
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	eb e3       	ldi	r30, 0x3B	; 59
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_u8SetPinInputType+0x80>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <DIO_u8SetPinInputType+0x7c>
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	99 c0       	rjmp	.+306    	; 0x2228 <DIO_u8SetPinInputType+0x1bc>
			else
				return ERROR;
    20f6:	51 e0       	ldi	r21, 0x01	; 1
    20f8:	5b 83       	std	Y+3, r21	; 0x03
    20fa:	62 c1       	rjmp	.+708    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
		}
		else if (Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7) {
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	88 30       	cpi	r24, 0x08	; 8
    2100:	88 f1       	brcs	.+98     	; 0x2164 <DIO_u8SetPinInputType+0xf8>
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	80 31       	cpi	r24, 0x10	; 16
    2106:	70 f5       	brcc	.+92     	; 0x2164 <DIO_u8SetPinInputType+0xf8>
			if (!GET_BIT(DDRB,(Copy_u8PinN-8)))
    2108:	e7 e3       	ldi	r30, 0x37	; 55
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	08 97       	sbiw	r24, 0x08	; 8
    211a:	a9 01       	movw	r20, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_u8SetPinInputType+0xb6>
    211e:	55 95       	asr	r21
    2120:	47 95       	ror	r20
    2122:	8a 95       	dec	r24
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_u8SetPinInputType+0xb2>
    2126:	ca 01       	movw	r24, r20
    2128:	81 70       	andi	r24, 0x01	; 1
    212a:	90 70       	andi	r25, 0x00	; 0
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	b9 f4       	brne	.+46     	; 0x215e <DIO_u8SetPinInputType+0xf2>
				SET_BIT(PORTB,(Copy_u8PinN-8));
    2130:	a8 e3       	ldi	r26, 0x38	; 56
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e8 e3       	ldi	r30, 0x38	; 56
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9c 01       	movw	r18, r24
    2144:	28 50       	subi	r18, 0x08	; 8
    2146:	30 40       	sbci	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8SetPinInputType+0xe8>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8SetPinInputType+0xe4>
    2158:	84 2b       	or	r24, r20
    215a:	8c 93       	st	X, r24
    215c:	65 c0       	rjmp	.+202    	; 0x2228 <DIO_u8SetPinInputType+0x1bc>
			else
				return ERROR;
    215e:	51 e0       	ldi	r21, 0x01	; 1
    2160:	5b 83       	std	Y+3, r21	; 0x03
    2162:	2e c1       	rjmp	.+604    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
		}
		else if (Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7) {
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	80 31       	cpi	r24, 0x10	; 16
    2168:	88 f1       	brcs	.+98     	; 0x21cc <DIO_u8SetPinInputType+0x160>
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	88 31       	cpi	r24, 0x18	; 24
    216e:	70 f5       	brcc	.+92     	; 0x21cc <DIO_u8SetPinInputType+0x160>
			if (!GET_BIT(DDRC,(Copy_u8PinN - 16)))
    2170:	e4 e3       	ldi	r30, 0x34	; 52
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	40 97       	sbiw	r24, 0x10	; 16
    2182:	a9 01       	movw	r20, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <DIO_u8SetPinInputType+0x11e>
    2186:	55 95       	asr	r21
    2188:	47 95       	ror	r20
    218a:	8a 95       	dec	r24
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <DIO_u8SetPinInputType+0x11a>
    218e:	ca 01       	movw	r24, r20
    2190:	81 70       	andi	r24, 0x01	; 1
    2192:	90 70       	andi	r25, 0x00	; 0
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	b9 f4       	brne	.+46     	; 0x21c6 <DIO_u8SetPinInputType+0x15a>
				SET_BIT(PORTC,(Copy_u8PinN - 16));
    2198:	a5 e3       	ldi	r26, 0x35	; 53
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e3       	ldi	r30, 0x35	; 53
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	88 2f       	mov	r24, r24
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 01       	movw	r18, r24
    21ac:	20 51       	subi	r18, 0x10	; 16
    21ae:	30 40       	sbci	r19, 0x00	; 0
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	02 2e       	mov	r0, r18
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <DIO_u8SetPinInputType+0x150>
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	0a 94       	dec	r0
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <DIO_u8SetPinInputType+0x14c>
    21c0:	84 2b       	or	r24, r20
    21c2:	8c 93       	st	X, r24
    21c4:	31 c0       	rjmp	.+98     	; 0x2228 <DIO_u8SetPinInputType+0x1bc>
			else
				return ERROR;
    21c6:	51 e0       	ldi	r21, 0x01	; 1
    21c8:	5b 83       	std	Y+3, r21	; 0x03
    21ca:	fa c0       	rjmp	.+500    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
		}
		else{
			if (!GET_BIT(DDRD,(Copy_u8PinN - 24)))
    21cc:	e1 e3       	ldi	r30, 0x31	; 49
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	48 97       	sbiw	r24, 0x18	; 24
    21de:	a9 01       	movw	r20, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <DIO_u8SetPinInputType+0x17a>
    21e2:	55 95       	asr	r21
    21e4:	47 95       	ror	r20
    21e6:	8a 95       	dec	r24
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <DIO_u8SetPinInputType+0x176>
    21ea:	ca 01       	movw	r24, r20
    21ec:	81 70       	andi	r24, 0x01	; 1
    21ee:	90 70       	andi	r25, 0x00	; 0
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	b9 f4       	brne	.+46     	; 0x2222 <DIO_u8SetPinInputType+0x1b6>
				SET_BIT(PORTD,(Copy_u8PinN - 24));
    21f4:	a2 e3       	ldi	r26, 0x32	; 50
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e2 e3       	ldi	r30, 0x32	; 50
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	48 2f       	mov	r20, r24
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9c 01       	movw	r18, r24
    2208:	28 51       	subi	r18, 0x18	; 24
    220a:	30 40       	sbci	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_u8SetPinInputType+0x1ac>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_u8SetPinInputType+0x1a8>
    221c:	84 2b       	or	r24, r20
    221e:	8c 93       	st	X, r24
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <DIO_u8SetPinInputType+0x1bc>
			else
				return ERROR;
    2222:	51 e0       	ldi	r21, 0x01	; 1
    2224:	5b 83       	std	Y+3, r21	; 0x03
    2226:	cc c0       	rjmp	.+408    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
		}
	}
	if(Copy_u8InputType==0){
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	88 23       	and	r24, r24
    222c:	09 f0       	breq	.+2      	; 0x2230 <DIO_u8SetPinInputType+0x1c4>
    222e:	c7 c0       	rjmp	.+398    	; 0x23be <DIO_u8SetPinInputType+0x352>
		if (Copy_u8PinN >= PIN_A0 && Copy_u8PinN <= PIN_A7) {
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	88 30       	cpi	r24, 0x08	; 8
    2234:	58 f5       	brcc	.+86     	; 0x228c <DIO_u8SetPinInputType+0x220>
			if (!GET_BIT(DDRA, Copy_u8PinN))
    2236:	ea e3       	ldi	r30, 0x3A	; 58
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a9 01       	movw	r20, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <DIO_u8SetPinInputType+0x1e2>
    224a:	55 95       	asr	r21
    224c:	47 95       	ror	r20
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <DIO_u8SetPinInputType+0x1de>
    2252:	ca 01       	movw	r24, r20
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	90 70       	andi	r25, 0x00	; 0
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	a9 f4       	brne	.+42     	; 0x2286 <DIO_u8SetPinInputType+0x21a>
				CLR_BIT(PORTA, Copy_u8PinN);
    225c:	ab e3       	ldi	r26, 0x3B	; 59
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	eb e3       	ldi	r30, 0x3B	; 59
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <DIO_u8SetPinInputType+0x20e>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <DIO_u8SetPinInputType+0x20a>
    227e:	80 95       	com	r24
    2280:	84 23       	and	r24, r20
    2282:	8c 93       	st	X, r24
    2284:	9c c0       	rjmp	.+312    	; 0x23be <DIO_u8SetPinInputType+0x352>
			else
				return ERROR;
    2286:	51 e0       	ldi	r21, 0x01	; 1
    2288:	5b 83       	std	Y+3, r21	; 0x03
    228a:	9a c0       	rjmp	.+308    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
			}
		else if (Copy_u8PinN >= PIN_B0 && Copy_u8PinN <= PIN_B7) {
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	88 30       	cpi	r24, 0x08	; 8
    2290:	90 f1       	brcs	.+100    	; 0x22f6 <DIO_u8SetPinInputType+0x28a>
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	80 31       	cpi	r24, 0x10	; 16
    2296:	78 f5       	brcc	.+94     	; 0x22f6 <DIO_u8SetPinInputType+0x28a>
			if (!GET_BIT(DDRB,(Copy_u8PinN - 8)))
    2298:	e7 e3       	ldi	r30, 0x37	; 55
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	08 97       	sbiw	r24, 0x08	; 8
    22aa:	a9 01       	movw	r20, r18
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <DIO_u8SetPinInputType+0x246>
    22ae:	55 95       	asr	r21
    22b0:	47 95       	ror	r20
    22b2:	8a 95       	dec	r24
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <DIO_u8SetPinInputType+0x242>
    22b6:	ca 01       	movw	r24, r20
    22b8:	81 70       	andi	r24, 0x01	; 1
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	c1 f4       	brne	.+48     	; 0x22f0 <DIO_u8SetPinInputType+0x284>
				CLR_BIT(PORTB,(Copy_u8PinN - 8));
    22c0:	a8 e3       	ldi	r26, 0x38	; 56
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e8 e3       	ldi	r30, 0x38	; 56
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9c 01       	movw	r18, r24
    22d4:	28 50       	subi	r18, 0x08	; 8
    22d6:	30 40       	sbci	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_u8SetPinInputType+0x278>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_u8SetPinInputType+0x274>
    22e8:	80 95       	com	r24
    22ea:	84 23       	and	r24, r20
    22ec:	8c 93       	st	X, r24
    22ee:	67 c0       	rjmp	.+206    	; 0x23be <DIO_u8SetPinInputType+0x352>
			else
				return ERROR;
    22f0:	51 e0       	ldi	r21, 0x01	; 1
    22f2:	5b 83       	std	Y+3, r21	; 0x03
    22f4:	65 c0       	rjmp	.+202    	; 0x23c0 <DIO_u8SetPinInputType+0x354>
			}
		else if (Copy_u8PinN >= PIN_C0 && Copy_u8PinN <= PIN_C7) {
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	80 31       	cpi	r24, 0x10	; 16
    22fa:	90 f1       	brcs	.+100    	; 0x2360 <DIO_u8SetPinInputType+0x2f4>
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	88 31       	cpi	r24, 0x18	; 24
    2300:	78 f5       	brcc	.+94     	; 0x2360 <DIO_u8SetPinInputType+0x2f4>
			if (!GET_BIT(DDRC,(Copy_u8PinN - 16)))
    2302:	e4 e3       	ldi	r30, 0x34	; 52
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	40 97       	sbiw	r24, 0x10	; 16
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_u8SetPinInputType+0x2b0>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_u8SetPinInputType+0x2ac>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	90 70       	andi	r25, 0x00	; 0
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	c1 f4       	brne	.+48     	; 0x235a <DIO_u8SetPinInputType+0x2ee>
				CLR_BIT(PORTC,(Copy_u8PinN - 16));
    232a:	a5 e3       	ldi	r26, 0x35	; 53
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e5 e3       	ldi	r30, 0x35	; 53
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 01       	movw	r18, r24
    233e:	20 51       	subi	r18, 0x10	; 16
    2340:	30 40       	sbci	r19, 0x00	; 0
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 2e       	mov	r0, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_u8SetPinInputType+0x2e2>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	0a 94       	dec	r0
    2350:	e2 f7       	brpl	.-8      	; 0x234a <DIO_u8SetPinInputType+0x2de>
    2352:	80 95       	com	r24
    2354:	84 23       	and	r24, r20
    2356:	8c 93       	st	X, r24
    2358:	32 c0       	rjmp	.+100    	; 0x23be <DIO_u8SetPinInputType+0x352>
			else
				return ERROR;
    235a:	51 e0       	ldi	r21, 0x01	; 1
    235c:	5b 83       	std	Y+3, r21	; 0x03
    235e:	30 c0       	rjmp	.+96     	; 0x23c0 <DIO_u8SetPinInputType+0x354>
		}
		else{
			if (!GET_BIT(DDRD,(Copy_u8PinN - 24)))
    2360:	e1 e3       	ldi	r30, 0x31	; 49
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	48 97       	sbiw	r24, 0x18	; 24
    2372:	a9 01       	movw	r20, r18
    2374:	02 c0       	rjmp	.+4      	; 0x237a <DIO_u8SetPinInputType+0x30e>
    2376:	55 95       	asr	r21
    2378:	47 95       	ror	r20
    237a:	8a 95       	dec	r24
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <DIO_u8SetPinInputType+0x30a>
    237e:	ca 01       	movw	r24, r20
    2380:	81 70       	andi	r24, 0x01	; 1
    2382:	90 70       	andi	r25, 0x00	; 0
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	c1 f4       	brne	.+48     	; 0x23b8 <DIO_u8SetPinInputType+0x34c>
				CLR_BIT(PORTD,(Copy_u8PinN - 24));
    2388:	a2 e3       	ldi	r26, 0x32	; 50
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e2 e3       	ldi	r30, 0x32	; 50
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9c 01       	movw	r18, r24
    239c:	28 51       	subi	r18, 0x18	; 24
    239e:	30 40       	sbci	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_u8SetPinInputType+0x340>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_u8SetPinInputType+0x33c>
    23b0:	80 95       	com	r24
    23b2:	84 23       	and	r24, r20
    23b4:	8c 93       	st	X, r24
    23b6:	03 c0       	rjmp	.+6      	; 0x23be <DIO_u8SetPinInputType+0x352>
			else
				return ERROR;
    23b8:	51 e0       	ldi	r21, 0x01	; 1
    23ba:	5b 83       	std	Y+3, r21	; 0x03
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <DIO_u8SetPinInputType+0x354>
			}
	}
	return NO_ERROR;
    23be:	1b 82       	std	Y+3, r1	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <__vector_11>:
volatile uint8_t R_Data;
char c[]="Duty Cycle = ";


ISR(USART_RXC_vect)
{
    23ce:	1f 92       	push	r1
    23d0:	0f 92       	push	r0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	0f 92       	push	r0
    23d6:	11 24       	eor	r1, r1
    23d8:	2f 93       	push	r18
    23da:	3f 93       	push	r19
    23dc:	4f 93       	push	r20
    23de:	5f 93       	push	r21
    23e0:	6f 93       	push	r22
    23e2:	7f 93       	push	r23
    23e4:	8f 93       	push	r24
    23e6:	9f 93       	push	r25
    23e8:	af 93       	push	r26
    23ea:	bf 93       	push	r27
    23ec:	ef 93       	push	r30
    23ee:	ff 93       	push	r31
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	R_Data = UDR;
    23f8:	ec e2       	ldi	r30, 0x2C	; 44
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	80 93 7f 00 	sts	0x007F, r24
	PWM_Speed(R_Data);
    2402:	80 91 7f 00 	lds	r24, 0x007F
    2406:	0e 94 2a 08 	call	0x1054	; 0x1054 <PWM_Speed>
	CLCD_voidSendCommand(CLEAR_DISPLAY);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	0e 94 b9 08 	call	0x1172	; 0x1172 <CLCD_voidSendCommand>
	CLCD_voidGoToXY(0,1);
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	61 e0       	ldi	r22, 0x01	; 1
    2414:	0e 94 b3 0a 	call	0x1566	; 0x1566 <CLCD_voidGoToXY>
	CLCD_voidSendString(c);
    2418:	8b e6       	ldi	r24, 0x6B	; 107
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,1);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	61 e0       	ldi	r22, 0x01	; 1
    2424:	0e 94 b3 0a 	call	0x1566	; 0x1566 <CLCD_voidGoToXY>
	CLCD_voidWriteNumber(R_Data*10);
    2428:	80 91 7f 00 	lds	r24, 0x007F
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9c 01       	movw	r18, r24
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	c9 01       	movw	r24, r18
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	82 0f       	add	r24, r18
    2442:	93 1f       	adc	r25, r19
    2444:	aa 27       	eor	r26, r26
    2446:	97 fd       	sbrc	r25, 7
    2448:	a0 95       	com	r26
    244a:	ba 2f       	mov	r27, r26
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 2e 0b 	call	0x165c	; 0x165c <CLCD_voidWriteNumber>
	CLCD_voidSendString(" %");
    2454:	80 e6       	ldi	r24, 0x60	; 96
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 8a 0a 	call	0x1514	; 0x1514 <CLCD_voidSendString>

}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	ff 91       	pop	r31
    2462:	ef 91       	pop	r30
    2464:	bf 91       	pop	r27
    2466:	af 91       	pop	r26
    2468:	9f 91       	pop	r25
    246a:	8f 91       	pop	r24
    246c:	7f 91       	pop	r23
    246e:	6f 91       	pop	r22
    2470:	5f 91       	pop	r21
    2472:	4f 91       	pop	r20
    2474:	3f 91       	pop	r19
    2476:	2f 91       	pop	r18
    2478:	0f 90       	pop	r0
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	0f 90       	pop	r0
    247e:	1f 90       	pop	r1
    2480:	18 95       	reti

00002482 <main>:




int main()
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	00 d0       	rcall	.+0      	; 0x2488 <main+0x6>
    2488:	00 d0       	rcall	.+0      	; 0x248a <main+0x8>
    248a:	00 d0       	rcall	.+0      	; 0x248c <main+0xa>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62

	DIO_u8Init_PORT(DIRECTION_PORT0,DIO_OUTPUT);
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	61 e0       	ldi	r22, 0x01	; 1
    2494:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_u8Init_PORT>

	DIO_u8Init_PIN(PIN_B0,DIO_OUTPUT);
    2498:	88 e0       	ldi	r24, 0x08	; 8
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_u8Init_PIN>
	DIO_u8Init_PIN(PIN_B1,DIO_OUTPUT);
    24a0:	89 e0       	ldi	r24, 0x09	; 9
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_u8Init_PIN>
	DIO_u8Init_PIN(PIN_B2,DIO_OUTPUT);
    24a8:	8a e0       	ldi	r24, 0x0A	; 10
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_u8Init_PIN>

	str_UartConfg_t Uart_0;

	Uart_0.u8_DataBits=UART_8_BIT_MODE;
    24b0:	83 e0       	ldi	r24, 0x03	; 3
    24b2:	8d 83       	std	Y+5, r24	; 0x05
	Uart_0.u8_FlagAction=UART_INTERRUPT;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	8e 83       	std	Y+6, r24	; 0x06
	Uart_0.u32_BaudRate=9600;
    24b8:	80 e8       	ldi	r24, 0x80	; 128
    24ba:	95 e2       	ldi	r25, 0x25	; 37
    24bc:	a0 e0       	ldi	r26, 0x00	; 0
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	ab 83       	std	Y+3, r26	; 0x03
    24c6:	bc 83       	std	Y+4, r27	; 0x04
	UART_init(&Uart_0);
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	PWM_init();
    24d0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <PWM_init>
	CLCD_voidInit();
    24d4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidInit>
    24d8:	ff cf       	rjmp	.-2      	; 0x24d8 <main+0x56>

000024da <__mulsi3>:
    24da:	62 9f       	mul	r22, r18
    24dc:	d0 01       	movw	r26, r0
    24de:	73 9f       	mul	r23, r19
    24e0:	f0 01       	movw	r30, r0
    24e2:	82 9f       	mul	r24, r18
    24e4:	e0 0d       	add	r30, r0
    24e6:	f1 1d       	adc	r31, r1
    24e8:	64 9f       	mul	r22, r20
    24ea:	e0 0d       	add	r30, r0
    24ec:	f1 1d       	adc	r31, r1
    24ee:	92 9f       	mul	r25, r18
    24f0:	f0 0d       	add	r31, r0
    24f2:	83 9f       	mul	r24, r19
    24f4:	f0 0d       	add	r31, r0
    24f6:	74 9f       	mul	r23, r20
    24f8:	f0 0d       	add	r31, r0
    24fa:	65 9f       	mul	r22, r21
    24fc:	f0 0d       	add	r31, r0
    24fe:	99 27       	eor	r25, r25
    2500:	72 9f       	mul	r23, r18
    2502:	b0 0d       	add	r27, r0
    2504:	e1 1d       	adc	r30, r1
    2506:	f9 1f       	adc	r31, r25
    2508:	63 9f       	mul	r22, r19
    250a:	b0 0d       	add	r27, r0
    250c:	e1 1d       	adc	r30, r1
    250e:	f9 1f       	adc	r31, r25
    2510:	bd 01       	movw	r22, r26
    2512:	cf 01       	movw	r24, r30
    2514:	11 24       	eor	r1, r1
    2516:	08 95       	ret

00002518 <__udivmodsi4>:
    2518:	a1 e2       	ldi	r26, 0x21	; 33
    251a:	1a 2e       	mov	r1, r26
    251c:	aa 1b       	sub	r26, r26
    251e:	bb 1b       	sub	r27, r27
    2520:	fd 01       	movw	r30, r26
    2522:	0d c0       	rjmp	.+26     	; 0x253e <__udivmodsi4_ep>

00002524 <__udivmodsi4_loop>:
    2524:	aa 1f       	adc	r26, r26
    2526:	bb 1f       	adc	r27, r27
    2528:	ee 1f       	adc	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	a2 17       	cp	r26, r18
    252e:	b3 07       	cpc	r27, r19
    2530:	e4 07       	cpc	r30, r20
    2532:	f5 07       	cpc	r31, r21
    2534:	20 f0       	brcs	.+8      	; 0x253e <__udivmodsi4_ep>
    2536:	a2 1b       	sub	r26, r18
    2538:	b3 0b       	sbc	r27, r19
    253a:	e4 0b       	sbc	r30, r20
    253c:	f5 0b       	sbc	r31, r21

0000253e <__udivmodsi4_ep>:
    253e:	66 1f       	adc	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	88 1f       	adc	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	1a 94       	dec	r1
    2548:	69 f7       	brne	.-38     	; 0x2524 <__udivmodsi4_loop>
    254a:	60 95       	com	r22
    254c:	70 95       	com	r23
    254e:	80 95       	com	r24
    2550:	90 95       	com	r25
    2552:	9b 01       	movw	r18, r22
    2554:	ac 01       	movw	r20, r24
    2556:	bd 01       	movw	r22, r26
    2558:	cf 01       	movw	r24, r30
    255a:	08 95       	ret

0000255c <__prologue_saves__>:
    255c:	2f 92       	push	r2
    255e:	3f 92       	push	r3
    2560:	4f 92       	push	r4
    2562:	5f 92       	push	r5
    2564:	6f 92       	push	r6
    2566:	7f 92       	push	r7
    2568:	8f 92       	push	r8
    256a:	9f 92       	push	r9
    256c:	af 92       	push	r10
    256e:	bf 92       	push	r11
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	ca 1b       	sub	r28, r26
    2586:	db 0b       	sbc	r29, r27
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	09 94       	ijmp

00002594 <__epilogue_restores__>:
    2594:	2a 88       	ldd	r2, Y+18	; 0x12
    2596:	39 88       	ldd	r3, Y+17	; 0x11
    2598:	48 88       	ldd	r4, Y+16	; 0x10
    259a:	5f 84       	ldd	r5, Y+15	; 0x0f
    259c:	6e 84       	ldd	r6, Y+14	; 0x0e
    259e:	7d 84       	ldd	r7, Y+13	; 0x0d
    25a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    25a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a6:	b9 84       	ldd	r11, Y+9	; 0x09
    25a8:	c8 84       	ldd	r12, Y+8	; 0x08
    25aa:	df 80       	ldd	r13, Y+7	; 0x07
    25ac:	ee 80       	ldd	r14, Y+6	; 0x06
    25ae:	fd 80       	ldd	r15, Y+5	; 0x05
    25b0:	0c 81       	ldd	r16, Y+4	; 0x04
    25b2:	1b 81       	ldd	r17, Y+3	; 0x03
    25b4:	aa 81       	ldd	r26, Y+2	; 0x02
    25b6:	b9 81       	ldd	r27, Y+1	; 0x01
    25b8:	ce 0f       	add	r28, r30
    25ba:	d1 1d       	adc	r29, r1
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	ed 01       	movw	r28, r26
    25c8:	08 95       	ret

000025ca <_exit>:
    25ca:	f8 94       	cli

000025cc <__stop_program>:
    25cc:	ff cf       	rjmp	.-2      	; 0x25cc <__stop_program>
